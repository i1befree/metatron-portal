import {Component, ElementRef, Injector, OnDestroy, OnInit, ViewChild} from '@angular/core';
import * as _ from 'lodash';
import {TranslateService} from 'ng2-translate';
import {AbstractComponent} from '../../../portal/common/component/abstract.component';
import {header, SlickGridHeader} from '../../../common/component/grid/grid.header';
import {SelectValue} from '../../../common/component/select/select.value';
import {GridComponent} from '../../../common/component/grid/grid.component';
import {ScriptService} from '../../../portal/common/service/script.service';
import {ApproachAnalysisService} from '../service/approach-analysis.service';
import {CommonConstant} from '../../../portal/common/constant/common-constant';
import {Validate} from '../../../common/util/validate-util';
import {Alert} from '../../../common/util/alert-util';
import {GridOption} from '../../../common/component/grid/grid.option';
import {ApproachAnalysis} from '../value/approach-analysis.value';
import {Loading} from '../../../common/util/loading-util';
import {environment} from '../../../../environments/environment';

declare var MapGeo: any;
declare var L: any;
declare var echarts: any;

@Component({
	selector: 'app-approach-analysis',
	templateUrl: './approach-analysis.component.html'
})
export class ApproachAnalysisComponent extends AbstractComponent implements OnInit, OnDestroy {

	/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	 | Private Variables
	 |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

	private mgMap: any;
	private polygonLayer: any;
	private textLayer: any;

	// 선택한 시/도 목록
	private currentSido: SelectValue[];
	// 선택한 시/군/구 목록
	private currentSigungu: SelectValue[];
	// 선택한 읍/면/동 목록
	private currentDong: SelectValue[];
	// 선택한 우편번호 목록
	private currentZipcode: SelectValue[];

	// 시/도 선택 변경 여부 체크
	private changedSido: boolean = true;
	// 시/군/구 선택 변경 여부 체크
	private changedSigungu: boolean = true;
	// 읍/면/동 선택 변경 여부 체크
	private changedDong: boolean = true;

	private minMaxDate: any;
	private startDate: Date;
	private endDate: Date;

	// 추이 차트
	private chart: any;
	// 가용율/비가용율 차트
	private chart1: any;
	// 가용율 데이터
	private chartData1: ApproachAnalysis.Entity[];
	// 비가용율 데이터
	private chartData4: ApproachAnalysis.Entity[];
	// 침투율/결합율 차트
	private chart2: any;
	// 침투율 데이터
	private chartData2: ApproachAnalysis.Entity[];
	// 결합율 데이터
	private chartData3: ApproachAnalysis.Entity[];
	// 인구 차트
	private chart5: any;
	// 인구 데이터
	private chartData5: ApproachAnalysis.Entity[];

	// 그리드헤더
	private gridHeader1: header[];
	private gridHeader2: header[];

	private loadingCount: number = 0;

	/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	 | Protected Variables
	 |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

	/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	 | Public Variables
	 |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

	// 시도 데이터
	public sidoList: SelectValue[] = [];
	public loadingSido: boolean;
	public dimmedSido: boolean;
	// 시군구 데이터
	public sigunguList: SelectValue[] = [];
	public loadingSigungu: boolean;
	public dimmedSigungu: boolean = true;
	// 읍면동 데이터
	public dongList: SelectValue[] = [];
	public loadingDong: boolean;
	public dimmedDong: boolean = true;
	// 우편번호 데이터
	public zipcodeList: SelectValue[] = [];
	public loadingZipcode: boolean;
	public dimmedZipcode: boolean = true;

	public currentAddr: string;
	public showSigungu: boolean = true;

	// 맵 라벨 표시 여부
	public showMapText: boolean;

	public showChartNodata: boolean = true;
	public showChartNodata1: boolean = true;
	public showChartNodata2: boolean = true;
	public showChartNodata3: boolean = true;
	public showChartNodata4: boolean = true;
	public showChartNodata5: boolean = true;
	public showGridContainer: boolean = false;
	public showGridNodata1: boolean = true;
	public showGridNodata2: boolean = true;

	public sortList1: SelectValue[];
	public sortList2: SelectValue[];
	public sortList3: SelectValue[];

	// 가용 합계
	public totalAvailability: number = 0;
	// 세대수 합계
	public totalAvailFirst: number = 0;
	// 가용세대수 합계
	public totalAvailSecond: number = 0;

	// 비가용조회 합계
	public totalInactive: number = 0;
	// 세대수 합계
	public totalInactiveFirst: number = 0;
	// 비가용세대수 합계
	public totalInactiveSecond: number = 0;

	// 침투율 합계
	public totalPenetration: number = 0;
	// 가입자수 합계
	public totalPenetrationFirst: number = 0;
	// B판매 합계
	public totalPenetrationSecond: number = 0;
	// T판매 합계
	public totalPenetrationThird: number = 0;

	// 결합율 합계
	public totalCombination: number = 0;
	// 유무선 결합건수 합계
	public totalCombinationFirst: number = 0;
	// B판매 합계
	public totalCombinationSecond: number = 0;
	// T판매 합계
	public totalCombinationThird: number = 0;

	// 인구증가추이 합계
	public totalPopulation: string = '0';

	// 추이 데이터 없는 날짜 개수
	public totalExceptDateCount: number = 0;

	public now: Date;

	/**
	 * 그리드1
	 */
	@ViewChild('grid1')
	public grid1: GridComponent;

	// 커버리지 목록
	public coverageList: ApproachAnalysis.Coverage[] = [];

	/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	 | Constructor
	 |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

	constructor(protected elementRef: ElementRef,
				protected injector: Injector,
				private scriptService: ScriptService,
				private approachAnalysisService: ApproachAnalysisService,
				public translateService: TranslateService) {

		super(elementRef, injector);

		this.now = new Date();

		window[ 'lodash' ] = _.noConflict();
		scriptService.loadScript('https://gis.tango.sktelecom.com/mapgeo/build/mapgeo.js?v=v2').then(result => {

			var options = {
				// 초기 줌레벨과 위치
				location: { zoom: 0, center: [ 37.5087805938127, 127.062289345605 ] }
			};

			const self = this;
			MapGeo.create('mgMap', 'BASEMAP', options).then(function (map) {
				// 생성된 map 객체를 window 객체에 추가하여 전역으로 사용 가능
				self.mgMap = map;

				// 행정경계를 담을 레이어를 생성합니다.
				self.polygonLayer = L.geoJson([], {
					style: function (geojson) {
						return {
							fillOpacity: 0.5,
							// fillColor: '#d2bb5f',
							isStroke: true,
							// strokeColor: '#d2bb5f',
							weight: '2'
							//dashArray: '5,5'
						};
					},
					onEachFeature: function (geojson, feature) {
						//feature를 클릭시 이벤트
						feature.on('click', function (e) {
							self.mapFeatureClick(e);
						});
					}
				}).addTo(map);

				self.textLayer = L.geoJson([], {
					pointToLayer: function (geojson, latlng) {
						var options = {
							text: geojson.properties.name,
							faceName: 'dotum',
							size: 11,
							color: '#fff',
							hAlign: 'middle', // left, middle, right
							vAlign: 'middle', // top, middle, bottom
							opacity: 1.0
						};
						return L.marker(latlng, { icon: new L.MG.TextIcon(options), interactive: true });
					},
					onEachFeature: function (geojson, feature) {
						//feature를 클릭시 이벤트
						feature.on('click', function (e) {
							self.mapFeatureClick(e);
						});
					}
				});

				// var a = 'MULTIPOLYGON(((128.177084309125 37.9465058899907,128.177758574738 37.945803418133,128.178666782707 37.9461610011063,128.178855592464 37.946180087304,128.179155719918 37.945840119717,128.17943886848 37.9454268429469,128.180909537478 37.9450704216472,128.181134834767 37.9448649370498,128.181500910817 37.9441099873537,128.181826408421 37.9437803427868,128.181847138851 37.9435609178366,128.182525282507 37.9433060883687,128.182768950905 37.9430003762174,128.183230932904 37.943036545234,128.184128254593 37.9426139318011,128.184873190114 37.9425022655975,128.185220508953 37.9419287517724,128.18543566005 37.9417808645213,128.186939779701 37.9413539498779,128.187787215741 37.9414477602975,128.189852803988 37.9414221259556,128.189895363703 37.9410836687021,128.190561281629 37.9399523037118,128.191740517379 37.9392090126309,128.192256918759 37.9384706843375,128.192255797967 37.9381039793634,128.192704021691 37.9367224258398,128.193284043967 37.9366547168682,128.193895677435 37.9360016574826,128.195153216288 37.9352069672266,128.195074102599 37.933661985321,128.196090517794 37.9332059057271,128.196430696989 37.9319816706653,128.196228174724 37.9316584525033,128.196769025826 37.9311473179409,128.196624213282 37.9306919800602,128.196838176601 37.9301376532823,128.196689404371 37.9294447000227,128.195973615281 37.9286532076675,128.196420766312 37.9283907150999,128.1967948744 37.928438905155,128.19744620823 37.9279755771577,128.197711146062 37.9278589533028,128.198632910428 37.9283257648357,128.198633392041 37.928671601022,128.199425698985 37.9296234115721,128.199659580994 37.9301085786836,128.2000406089 37.9301007959476,128.200830293538 37.9303336699046,128.201359103436 37.9306599732964,128.201741969624 37.9305877463646,128.202456464584 37.9309482350074,128.20342352031 37.9313499645058,128.20411567424 37.9311581590341,128.205177135256 37.9306121874005,128.206157322977 37.9307229528956,128.206909644053 37.9304953119032,128.208545284188 37.9304208487539,128.209662080767 37.9305622176173,128.210358959162 37.9304644262401,128.210809314723 37.9306955100506,128.211859656854 37.9310455942547,128.212832580165 37.9313544830889,128.213047792176 37.9313759976158,128.213288285281 37.9314000414839,128.214098017871 37.9312270460087,128.215234887918 37.9311956654218,128.216246152725 37.9307363313153,128.216737306303 37.9307972031774,128.217756860937 37.9310684159386,128.218030763798 37.9309357247242,128.218492005252 37.9309140737625,128.219025475088 37.930308470492,128.219631275446 37.9304192013041,128.220426169498 37.9301046743461,128.220913525878 37.9296349832315,128.22114370683 37.9295184633358,128.22114381841 37.9295183370437,128.221536481402 37.9293075680352,128.222583675137 37.9292853818543,128.224251779906 37.9296958620356,128.224691158395 37.9296141710043,128.225268380573 37.9290951349904,128.22632230424 37.9288077159375,128.22636870276 37.928423475171,128.227122404162 37.928567362975,128.227687185449 37.9286628373648,128.228601249907 37.9285112308391,128.229024495958 37.9286016702904,128.22955398864 37.9279484925044,128.230591433177 37.9270468958749,128.231964050453 37.9267504037962,128.232034657428 37.926128155942,128.23248043597 37.9252833759201,128.232902001103 37.9250420062208,128.233166582824 37.9250174719341,128.23347251131 37.9242019259939,128.233891389756 37.9238301241334,128.233726669981 37.9231127377426,128.233953255388 37.9226014293932,128.23369979174 37.9221371832741,128.234204066773 37.9211427959709,128.234091107773 37.9208752098263,128.234378887201 37.9201689211367,128.233816480893 37.9191832640511,128.234284442622 37.9183391542573,128.23430630172 37.9175346978924,128.234885541302 37.9169894409888,128.23545470359 37.9164670342085,128.235760286019 37.9160901973775,128.235941502086 37.914542813221,128.236630337108 37.9136432337192,128.237134617323 37.9130008173346,128.238015750935 37.9116880832737,128.239061613595 37.9107797649331,128.241306275376 37.9098791837884,128.24174128202 37.9101141724429,128.244580302968 37.909615319401,128.245028097244 37.9088038116285,128.24635735351 37.9079731443954,128.246716404707 37.9068301787435,128.247250931951 37.9064244216998,128.247216315116 37.9061023708107,128.247734369932 37.9055907338826,128.248337136367 37.9054982884292,128.248795690296 37.9041109243671,128.249779695524 37.9032809310913,128.249967959142 37.9029481296482,128.250664519659 37.9024499282874,128.251516405282 37.9018586155582,128.251838461034 37.9012521699744,128.251595421442 37.900697149308,128.252091289068 37.8996294868706,128.252020370444 37.8987325901464,128.252816768981 37.8984327260854,128.255434246393 37.8986690723969,128.255907250659 37.8984956120246,128.257310786896 37.8984394841348,128.25829747207 37.8981702187957,128.259838169438 37.898249908878,128.260597933433 37.8977631353144,128.261633379328 37.896794982345,128.264890596789 37.8964813592275,128.265901830337 37.8957283527237,128.266112942203 37.8956698605886,128.266174136386 37.8952916697605,128.267621387183 37.8942004738554,128.267884622469 37.8940918963025,128.268150535157 37.8937123665661,128.268329053082 37.893457215953,128.268725241123 37.8932509255336,128.268869306983 37.8931759115362,128.268420768146 37.8925421267546,128.267825110322 37.8908035964782,128.267692130475 37.8901465332739,128.267741612813 37.8898564719666,128.268014001505 37.889338871088,128.268561134263 37.8889262233977,128.269390954203 37.8885162289086,128.270398809651 37.8880740237708,128.2703949253 37.8880617218252,128.270189191694 37.8871258302784,128.270194573124 37.8870996105892,128.270398302185 37.886549631753,128.270456129587 37.8859610099415,128.270480679677 37.885617778453,128.270343857545 37.8851965581577,128.270223851172 37.8848761906741,128.27010584837 37.8845864135241,128.270495487992 37.8838041464374,128.270312608865 37.8835721939167,128.269897105144 37.8834410794578,128.269343085497 37.8832659337157,128.269078517569 37.8828534567291,128.268756127733 37.8823505400756,128.267204682513 37.8816983598471,128.266834209651 37.8814492567268,128.265992427654 37.8813477270779,128.265901994345 37.8816254055153,128.265457567045 37.8818711381191,128.264772101324 37.881342342788,128.264308186424 37.8808982645993,128.264165314918 37.8807032868491,128.263914191617 37.8803603911996,128.263895034988 37.8803314799897,128.265084431697 37.8797529448234,128.265331193176 37.8792883575192,128.265059573937 37.8784223864544,128.264950315723 37.8777258406181,128.265165480618 37.8770380466717,128.265116409853 37.8765321129828,128.264977563326 37.8763088950809,128.265491919617 37.8760655125479,128.265816338185 37.8753017345813,128.266518743811 37.8745359113669,128.26750143968 37.8753264039158,128.268871284181 37.8744386167559,128.269169286733 37.8740958045432,128.269838786764 37.8738098067285,128.270082366602 37.8725436846446,128.270697623111 37.8716147428395,128.271006422713 37.8712180904688,128.27114972546 37.8710224159168,128.271319339774 37.8707900829506,128.271343279765 37.8707834353114,128.271733220755 37.8706331401927,128.272042602176 37.8705846914834,128.272907459973 37.8704951677544,128.273378195447 37.8704728478865,128.274214504565 37.8703853005774,128.274270855365 37.8703837968162,128.274340507376 37.8702035138826,128.274376968181 37.8700980876727,128.274026446861 37.8700174518611,128.273680079475 37.869975253031,128.273678794186 37.8699651326205,128.273628072888 37.8699685135195,128.273628120708 37.8699689226683,128.273548066598 37.8699591692804,128.273222924728 37.8698462096766,128.27306846837 37.8698896156693,128.272967024196 37.869414164839,128.273054408647 37.8692906572509,128.273308448055 37.869183180851,128.274120504829 37.8689838258429,128.274293217367 37.8688206271729,128.275225332883 37.8685417155894,128.275074859717 37.8683071414961,128.275249886773 37.8671979937105,128.274713126685 37.8664819869725,128.275175393313 37.8657252066609,128.275318771089 37.8649649625114,128.275434524503 37.8647231202937,128.275667391074 37.8645732817106,128.275738876348 37.8645272841176,128.275607972971 37.8644395968498,128.275140983782 37.8632208460965,128.274611874448 37.8625190933317,128.274157103755 37.8618244101774,128.273799080725 37.8616751309255,128.273376941395 37.8613691705538,128.273138347152 37.8608337432775,128.273081101915 37.8607051423805,128.271769223103 37.8608623211094,128.271148646911 37.8609315114631,128.270489344633 37.8612696996998,128.270471046464 37.8612791809515,128.270205683985 37.8611905487734,128.26997032736 37.8611117243075,128.269496642637 37.8611753858483,128.269235598447 37.861379768286,128.269222988289 37.8613897531981,128.267775055089 37.8610666587264,128.267531230548 37.8610124079267,128.267528620183 37.8609914541495,128.267471965992 37.8605372688231,128.267003653868 37.8602498001393,128.266468552194 37.8598352245389,128.265834466408 37.859239284426,128.265691730142 37.8589697095168,128.2654549584 37.8588069910298,128.264787005559 37.8584929403733,128.264474856599 37.8583459469222,128.264046855013 37.8583798176812,128.263662344072 37.8583619760096,128.263464045604 37.8583528411457,128.262934337851 37.8579818340408,128.262791841821 37.8574549347403,128.262570331039 37.8568334377098,128.262561771223 37.8568098878495,128.261664682368 37.8564878496221,128.261363873105 37.8563798662027,128.261283798027 37.8559311252498,128.261058246193 37.8557176021778,128.261088793361 37.8551128315449,128.261691295909 37.8550267150985,128.261920372724 37.8548635098977,128.261830714808 37.8543729240553,128.261558328838 37.8544743777647,128.261559748207 37.8544324125394,128.261810564839 37.8542948763833,128.261548742448 37.8536816917487,128.261638885156 37.8532412638005,128.261283695724 37.8525243447615,128.261140562479 37.8519997003913,128.260739958762 37.8517221822117,128.260880369016 37.8507513801417,128.260666697274 37.8499620045607,128.260807944109 37.8496035134258,128.260814413905 37.8495871212168,128.26063525681 37.8495330106884,128.260568886515 37.849513169122,128.260202380368 37.8494027873096,128.260061899678 37.8493679649692,128.259743150196 37.8492891715986,128.259780726317 37.848992877252,128.259677259875 37.8482530060254,128.258918561254 37.8469992961298,128.258353095674 37.8465030840648,128.258046770838 37.8456068722479,128.258142200763 37.8450380075721,128.257874940708 37.8445403056699,128.257837549939 37.8444703197581,128.257028064374 37.8444263120792,128.256803489199 37.8444140629935,128.25659055122 37.8439993887907,128.256432801712 37.8436992739345,128.256107084474 37.8435006033339,128.256110441916 37.8422944988594,128.256253409407 37.8418695532035,128.255965927283 37.8416642861011,128.256267936843 37.8405059557919,128.256103867554 37.8396222963445,128.255481551473 37.8393910336562,128.255367243167 37.8393494524091,128.255052560569 37.8392348512791,128.254695821152 37.8395091925223,128.254003573925 37.8395720189337,128.253895921977 37.8393775009491,128.253836232324 37.8392697494233,128.253734435193 37.8390861426555,128.253665599681 37.8390246586849,128.253497852087 37.8389507082819,128.253471036458 37.8389388889606,128.253244636384 37.8388391054138,128.253228190933 37.8388319556673,128.253149860353 37.8387973217846,128.252958656582 37.8383432731885,128.252232033124 37.8379253157213,128.251735357178 37.8381535671015,128.251469592245 37.838055601664,128.251063670321 37.8376243812543,128.250185293006 37.8372795364231,128.249845457405 37.8368723827505,128.249203507804 37.8365058764853,128.248568877701 37.8364044936051,128.247540262694 37.8360738851663,128.24696645204 37.8353251787426,128.246900762284 37.8348810507157,128.24728588821 37.834499172674,128.247335180263 37.8340324380516,128.247183586815 37.8335239021532,128.247246115393 37.8329787633719,128.247012271143 37.8326878872852,128.245756147477 37.8326721666837,128.24517337726 37.8326974716086,128.244244705634 37.8324806418658,128.243710664238 37.8323852041113,128.242599735768 37.832094835034,128.242428949738 37.8319009717708,128.241520303286 37.8304612301333,128.24076925539 37.8294024119899,128.240581559625 37.8289604200947,128.240045391724 37.8289908388346,128.239546455999 37.8282967618402,128.239463679392 37.8281439152633,128.23923499401 37.8275216053126,128.239238628203 37.8273140728128,128.239319144977 37.8266307977369,128.239048018643 37.8261874254724,128.238894163933 37.8256881975352,128.238689272757 37.8252359646553,128.23813178474 37.8246041527975,128.237761888639 37.8243661978717,128.237300484225 37.8243870887257,128.236869947006 37.824130908147,128.236600779963 37.823909351702,128.236059710151 37.8237711657657,128.235363279297 37.8233406784017,128.235079814662 37.822835205681,128.23470782183 37.8221715923919,128.234321671051 37.822192808365,128.233645281721 37.8221970767977,128.233292418741 37.8220211487856,128.232776720376 37.8221062104454,128.23170557967 37.8220838989906,128.231613853536 37.8221814287,128.231028479734 37.8220025684735,128.230647145869 37.8218860608174,128.230494941859 37.8219746350081,128.229875330835 37.8218501863106,128.228513713581 37.821882403781,128.228273918648 37.8214178422858,128.227911871998 37.8210722289572,128.227402189809 37.8205769729696,128.227169561721 37.8207167817009,128.226881234238 37.8206437755256,128.226579960828 37.8208183579582,128.22638978569 37.8209287227681,128.22598956632 37.8208067603034,128.225726032935 37.8208596121992,128.224330730479 37.8205055834276,128.224142560494 37.820178709842,128.223730187359 37.8199861978275,128.223523861794 37.8195910930996,128.222749740474 37.819306058822,128.222422177305 37.8190262262737,128.221805921906 37.8188228720497,128.221539752991 37.8186721952457,128.220937692164 37.8180801794471,128.219758699428 37.8178404073537,128.21952354574 37.817848756682,128.21930857943 37.8174658398297,128.218949117171 37.8172308232604,128.218849497018 37.8169348367034,128.218471464657 37.8166487657394,128.21826765151 37.8164912435684,128.217770020239 37.8159887825962,128.217300414191 37.8156149696436,128.217349300876 37.8153501064622,128.216532843574 37.8149030146886,128.216319702878 37.8145000858061,128.216120814723 37.814382485907,128.216156781466 37.8140865090161,128.215745550553 37.8136788707086,128.215490013481 37.8131356169224,128.215205837948 37.8130315639146,128.214366167531 37.8123560876095,128.213533650196 37.8123125744311,128.213081168982 37.8120283755728,128.212415972881 37.8119958034379,128.21204433365 37.8120770457497,128.212031961263 37.8120797106663,128.211370011389 37.8122241780778,128.210711588738 37.8123677645033,128.209493649428 37.8125176409688,128.208670913324 37.8126820486917,128.20866348193 37.8126835302541,128.20745042409 37.8139194977996,128.206884555257 37.8141913302178,128.206217918975 37.8146821081035,128.205691750253 37.815301222588,128.205514863026 37.8155093942841,128.204587693923 37.8155619468798,128.204535295908 37.8155692322498,128.20441066134 37.8155868399448,128.203721643614 37.8156842416157,128.202543656029 37.8158953002632,128.202541881128 37.8158956035493,128.201500413615 37.8162311039665,128.200708394186 37.8173554414625,128.199750542945 37.8178598420924,128.199229574162 37.8179704334915,128.1986293162 37.8187535655774,128.197222824663 37.8200493787522,128.196293445438 37.8219712484333,128.196258751026 37.8220431124747,128.194459433304 37.8223130401314,128.19444421061 37.8223154494142,128.192761591444 37.8228913216779,128.191950898141 37.8236830188098,128.191311913745 37.8241832794029,128.190249298532 37.8254465421709,128.189112622567 37.8263867794839,128.188725652733 37.8268906826003,128.188195643028 37.8275714215401,128.18749270228 37.8287814821975,128.18693932568 37.8295345151154,128.186655153622 37.8299208213811,128.186612082946 37.8299795340215,128.18660964878 37.8299829406974,128.184554212502 37.8299881162203,128.184763301573 37.8305231845897,128.184167888132 37.8308470089832,128.18416618815 37.8308518081278,128.184094614817 37.8310372173699,128.183808767133 37.8320983610645,128.183347985946 37.8328749477893,128.183154849944 37.8328498575608,128.181562633799 37.8339077667968,128.180852145185 37.8342743956079,128.180104973799 37.8350135758624,128.180256411845 37.8356075034029,128.180776764853 37.8360727284961,128.180902280845 37.8366877453095,128.181085014464 37.8368385088118,128.181170683899 37.8373140008256,128.181405661243 37.8375132190614,128.181298939381 37.8377887803091,128.181105294098 37.838045510253,128.181516470143 37.8390982568175,128.181502922785 37.839339943477,128.181245749929 37.8394641377398,128.181233250448 37.8397711396252,128.180954015245 37.8414969049515,128.18124199894 37.8421477293622,128.181140173606 37.8427979643594,128.18017318017 37.8434486909821,128.178799842343 37.8450702530665,128.178838318503 37.8456371483577,128.178192497795 37.8463724907882,128.177322015511 37.846644417377,128.175805779198 37.8466730578965,128.174698793202 37.8470990669652,128.173560684358 37.8476675528176,128.172002190869 37.8494947002619,128.171908390241 37.850141468981,128.170532249106 37.8503232118254,128.170202096302 37.8506854395232,128.169222199409 37.8510037234544,128.168701361076 37.8512526864806,128.168791193356 37.8521766221015,128.169005187168 37.8524394204113,128.169311694384 37.8531883516336,128.170215857166 37.8542339958234,128.170644664251 37.854608679282,128.17066529891 37.8549710852473,128.170929703826 37.8552102982198,128.170995746965 37.8555249512433,128.170897264766 37.8557641087825,128.171689901143 37.8569614625643,128.170748511053 37.8579463147535,128.170223729055 37.8584878481531,128.170221116664 37.8590644458294,128.170030532607 37.85976847575,128.169738993184 37.8604875762657,128.169552719469 37.8609469097269,128.169187278068 37.8612371350724,128.169321478285 37.8616628854369,128.169033334874 37.8622606179705,128.168439468992 37.8627935280649,128.168444631569 37.8628275472844,128.168564083794 37.8636244990726,128.168214512444 37.8644939535344,128.168053205836 37.8652995941441,128.168185659738 37.8656372502761,128.168494846359 37.8659219034094,128.169210158849 37.8665806330788,128.16919765 37.8666429783547,128.169108506765 37.8670926185505,128.169248234441 37.8684079481132,128.169248639729 37.868411320415,128.168661363337 37.8688461944006,128.16865082102 37.8688539037647,128.16888207965 37.8698710280577,128.168826872351 37.8707603668442,128.168995180835 37.8712316653914,128.168998954472 37.8717628736024,128.169432672699 37.8725327833904,128.169888485715 37.8730597888573,128.169991954309 37.8731792516961,128.170000712505 37.8731938093278,128.170477993312 37.8739776357045,128.170651030871 37.87416200465,128.170901735043 37.8744289408988,128.171783025356 37.8750882577847,128.172470337666 37.8757427337303,128.172936842953 37.8759773916444,128.173363934308 37.8761003899773,128.17391822352 37.8764051222573,128.173915875183 37.8764138716816,128.173629145534 37.8775504447813,128.173605573117 37.8779453855178,128.174198692586 37.8786829921803,128.174443148035 37.8792256027435,128.174314111005 37.8801601548542,128.173652374954 37.8815262490209,128.173690123832 37.8831905533876,128.174118645728 37.884499057601,128.17425639786 37.8849202583257,128.174249995433 37.8849194835914,128.174167652684 37.884909220059,128.172977589302 37.8847609739334,128.171920855048 37.8847627661643,128.171210183073 37.8854438127974,128.169897787001 37.8859016560436,128.16943889819 37.8861300299672,128.169040885253 37.8862094246405,128.167700739438 37.88590092588,128.167190198361 37.8862787204654,128.166059415478 37.8870604617355,128.165076377581 37.8870974907161,128.164225859193 37.8870684530061,128.16379969377 37.8877083596228,128.163669205954 37.8879038936496,128.16371943591 37.888703786736,128.163412471523 37.8891079956452,128.163660832924 37.8894954545527,128.163147654075 37.8904988259958,128.162858189723 37.8907283173098,128.162743786955 37.8911807345996,128.162375423593 37.8915894941185,128.162197408285 37.8917227225859,128.161071114347 37.8927315582017,128.161112223078 37.8934955030804,128.161176637971 37.8939554474466,128.161051508965 37.8946979527515,128.161042399214 37.8947512488729,128.160801262392 37.8951315010907,128.16088833757 37.8952934812454,128.161322906389 37.8961018662212,128.161274149154 37.8966065797387,128.16174477494 37.897900822126,128.162055521968 37.8987802947136,128.162032631086 37.8993232113705,128.162278953059 37.9000067073967,128.162676357211 37.9013634783524,128.162676602212 37.9017325483503,128.16260373334 37.9019388787576,128.162412675394 37.9022903416112,128.162472913315 37.9027159030595,128.162652446414 37.9032145229281,128.162564797616 37.9034196127647,128.162864142759 37.9038758874063,128.162887314472 37.9040893347016,128.16242907358 37.9044700109732,128.162629992235 37.905701252494,128.16172909852 37.9059320114038,128.16120846663 37.9065762049788,128.159453071849 37.9068639154501,128.159048726276 37.9070072850553,128.158981713406 37.9074116664366,128.158140156474 37.9076471738046,128.157474990811 37.9076644509323,128.156548051558 37.9082343297407,128.156972193966 37.9086629288546,128.157264078364 37.9097071890491,128.157414033608 37.9104530935865,128.157588455709 37.9109348187359,128.157536132344 37.9112477626559,128.159084286263 37.9120598639571,128.15923671498 37.912529987596,128.15942488441 37.9134561469369,128.160289817212 37.9137537232528,128.160340590138 37.9138746731679,128.16037111105 37.9139486219088,128.160427582515 37.9140834595218,128.160477268012 37.9142020772502,128.160949837115 37.9145441960918,128.160854856642 37.9149671893234,128.161324543251 37.915118409954,128.161658724205 37.9154137085388,128.161664334703 37.9158024017483,128.162377406725 37.9167968149524,128.16236925591 37.9174872151751,128.163582222091 37.9178774206344,128.164459948652 37.9189586969912,128.164839090338 37.9207980531386,128.165073409421 37.9210012435306,128.165056333788 37.922642347116,128.165522660049 37.9230633048283,128.166934491283 37.9229784869209,128.168024253324 37.9231530409134,128.168507171783 37.92381180962,128.169140772556 37.9236209844627,128.169998807693 37.9238775305043,128.170201902398 37.9241539953536,128.170101877093 37.9244820850334,128.170377256629 37.9251390012065,128.17098014078 37.925667452394,128.171951322503 37.9260266306628,128.172260941523 37.926479493297,128.172262756824 37.9267418154381,128.172265442494 37.9271299011676,128.172411040911 37.9276045806266,128.172139353809 37.9283347907261,128.172303103935 37.9287357685865,128.171443675865 37.9294744826441,128.171195279536 37.9302995852052,128.171451021501 37.9308018988462,128.171235986229 37.9310824926428,128.171307642052 37.9320334127124,128.171700684159 37.932579964982,128.172356458261 37.9328798246416,128.173087140447 37.9335069768778,128.17329890662 37.9340601483816,128.173079871835 37.9344333487168,128.173049124307 37.9352928878365,128.173543106851 37.9358432525719,128.173542945968 37.9366282584491,128.173824586313 37.9368470886453,128.173928624913 37.9375277002725,128.173808559677 37.9389091109069,128.174098993354 37.9392464717335,128.174223349501 37.9398585134383,128.174191174961 37.9405194818985,128.174347559095 37.9407395651554,128.174256501206 37.9415397693559,128.174456528337 37.9427198245912,128.174310815339 37.9431071907062,128.174316598504 37.94415614038,128.174163458851 37.9443136864795,128.174062160554 37.9450525292654,128.175165352511 37.9458544415099,128.175928152264 37.9463190340398,128.17679983843 37.9463549853421,128.177084309125 37.9465058899907)))';
				// self.createPolygonLayer([{wkt:a, zipcode:'11111'}]);

			});
		});
	}

	/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	 | Override Method
	 |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

	public ngOnInit(): void {
		super.ngOnInit();

		this.loadingCount = 0;

		const now = new Date();
		const minDate = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
		const maxDate = new Date();
		const defaultDate = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());

		this.minMaxDate = this.jQuery('#minMaxDate')
			.datepicker({
				language: 'ko',
				autoClose: true,
				class: 'dtp-datepicker',
				dateFormat: 'yyyy-mm-dd',
				navTitles: { days: 'yyyy<span>년&nbsp;</span> MM' },
				onHide: function () {},
				position: 'bottom left',
				timepicker: false,
				toggleSelected: true,
				range: true,
				multipleDatesSeparator: ' ~ ',
				minDate: minDate,
				maxDate: maxDate
			})
			.data('datepicker');

		this.minMaxDate.selectDate([ defaultDate, now ]);
		this.startDate = defaultDate;
		this.endDate = now;

		const self = this;
		this.minMaxDate.update('onSelect', function (formattedDate, date, inst) {
			self.minMaxDateSelect();
		});

		// 침투율 조회(전국)
		this.searchClick();

		// 시/도 데이터 조회
		this.getSido();

		// 정렬 초기화
		this.initChartSortList1();
		this.initChartSortList2();
		this.initChartSortList3();
	}

	public ngOnDestroy(): void {
		super.ngOnDestroy();
	}

	/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	 | Public Method
	 |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

	/**
	 * 시/도 데이터 조회
	 * @param isOpen
	 */
	public getSido() {
		if (!this.sidoList || !this.sidoList.length) {
			this.loadingSido = true;
			this.changedSido = true;
			this.changedSigungu = false;
			this.changedDong = false;

			this.showLoading(true);
			this.approachAnalysisService.getSido().then(result => {
				if (CommonConstant.CODE.RESULT_CODE.SUCCESS === result.code) {
					let tempList = [];

					Array.from(result.data.zipCodeList).forEach((value) => {
						tempList.push(new SelectValue(value.sido, value.sido, false));
					});

					this.sidoList = tempList;
				}
				this.loadingSido = false;
				this.showLoading(false);
			}).catch(reason => {
				this.showLoading(false);
			});
		}
	}

	/**
	 * 시도 선택
	 * @param item
	 */
	public sidoSelect(item: SelectValue) {
		this.changedSido = true;
		this.currentSido = [ item ];
		this.currentSigungu = [];
		this.currentDong = [];
		this.currentZipcode = [];
		this.sigunguList = [];
		this.dongList = [];
		this.zipcodeList = [];
		this.dimmedDong = true;
		this.dimmedZipcode = true;

		let isSejong = this.isSejong();

		if (this.currentSido.length == 1 && isSejong) {
			this.showSigungu = false;
			this.dimmedDong = false;
			this.changedSigungu = true;

			this.getDong();
		} else {
			this.showSigungu = true;
			this.dimmedSigungu = false;

			this.getSigungu();
		}

		if (item.value == 'ALL') {
			this.currentSido = [];
		}
	}

	/**
	 * 시/군/구 조회
	 * @param isOpen
	 */
	public getSigungu() {
		if (this.changedSido) {
			this.loadingSigungu = true;
			this.changedSido = false;
			this.changedSigungu = true;
			this.changedDong = false;

			let sido = this.currentSido.map(function (elem) {
				return elem.value;
			}).join(',');

			this.showLoading(true);
			this.approachAnalysisService.getSigungu(sido).then(result => {
				if (CommonConstant.CODE.RESULT_CODE.SUCCESS === result.code) {
					let tempList = [];

					Array.from(result.data.zipCodeList).forEach((value) => {
						tempList.push(new SelectValue(value.sigungu, value.sigunguCd, false));
					});

					this.sigunguList = tempList;
				}
				this.loadingSigungu = false;
				this.showLoading(false);
			}).catch(reason => {
				this.showLoading(false);
			});
		}
	}

	/**
	 * 시군구 선택
	 * @param item
	 */
	public sigunguSelect(item: SelectValue, doSearch: boolean = false) {
		this.changedSigungu = true;
		this.currentSigungu = [ item ];
		this.currentDong = [];
		this.currentZipcode = [];
		this.dongList = [];
		this.zipcodeList = [];
		this.dimmedDong = false;
		this.dimmedZipcode = true;

		this.getDong(doSearch);

		if (item.value == 'ALL') {
			this.currentSigungu = [];
		}
	}

	/**
	 * 읍/면/동 조회
	 * @param isOpen
	 */
	public getDong(doSearch: boolean = false) {
		if (this.changedSigungu) {
			this.loadingDong = true;
			this.changedSigungu = false;
			this.changedDong = true;

			let sido = this.currentSido.map(function (elem) {
				return elem.value;
			}).join(',');

			let sigungu = this.currentSigungu.map(function (elem) {
				return elem.label;
			}).join(',');

			this.showLoading(true);
			// 읍면동 조회
			this.approachAnalysisService.getDong(sido, sigungu).then(result => {
				if (CommonConstant.CODE.RESULT_CODE.SUCCESS === result.code) {
					let tempList = [];

					Array.from(result.data.zipCodeList).forEach((value) => {
						if (Validate.isEmpty(value.dong)) {
							tempList.push(new SelectValue(value.ri, value.dongcode, false));
						} else {
							tempList.push(new SelectValue(value.dong, value.dongcode, false));
						}
					});

					this.dongList = tempList;
				}
				this.loadingDong = false;
				this.showLoading(false);

				// 침투율 조회
				if (doSearch) {
					this.searchClick();
				}
			}).catch(reason => {
				this.showLoading(false);
			});
		}
	}

	/**
	 * 읍면동 선택
	 * @param item
	 */
	public dongSelect(items: SelectValue[], doSearch: boolean = false) {
		this.changedDong = true;
		this.currentDong = items;
		this.currentZipcode = [];
		this.zipcodeList = [];
		this.dimmedZipcode = false;

		this.getZipcode(doSearch);

		if (items.length == 1 && items[ 0 ].value == 'ALL') {
			this.currentDong = [];
		}
	}

	/**
	 * 우편번호 조회
	 * @param isOpen
	 */
	public getZipcode(doSearch: boolean = false) {
		if (this.changedSido || this.changedSigungu || this.changedDong) {
			this.loadingZipcode = true;
			this.changedDong = false;

			let sido = this.currentSido.map(function (elem) {
				return elem.value;
			});

			let sigungu = this.currentSigungu.map(function (elem) {
				return elem.label;
			});

			let dong = this.currentDong.map(function (elem) {
				return elem.label;
			});

			this.showLoading(true);
			this.approachAnalysisService.getZipcode(sido, sigungu, dong).then(result => {
				if (CommonConstant.CODE.RESULT_CODE.SUCCESS === result.code) {
					let tempList = [];

					Array.from(result.data.zipCodeList).forEach((value) => {
						tempList.push(new SelectValue(value.zipcode, value.zipcode, false));
					});

					this.zipcodeList = tempList;
				}
				this.loadingZipcode = false;
				this.showLoading(false);

				// 침투율 조회
				if (doSearch) {
					this.searchClick();
				}
			}).catch(reason => {
				this.showLoading(false);
			});
		}
	}

	/**
	 * 우편번호 선택
	 * @param item
	 */
	public zipcodeSelect(items: SelectValue[], doSearch: boolean = false) {

		this.currentZipcode = items;

		if (items.length == 1 && items[ 0 ].value == 'ALL') {
			this.currentZipcode = [];
		}

		// 침투율 조회
		if (doSearch) {
			this.searchClick();
		}
	}

	/**
	 * 검색 클릭
	 */
	public searchClick() {

		if (!this.startDate && !this.endDate) {
			Alert.warning(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.SEARCH.VALID', '날짜를 선택해 주세요.'));
			return;
		}

		this.showLoading(true);

		this.showGridContainer = false;
		this.currentAddr = this.getAddrText();

		let sido;
		let sigungu;
		let dong;
		let zipcode;

		// 시도
		if (this.currentSido) {
			sido = this.currentSido.map(function (elem) {
				return elem.value;
			});
		}

		// 시군구
		if (this.currentSigungu) {
			sigungu = this.currentSigungu.map(function (elem) {
				return elem.label;
			});
		}

		// 읍면동
		if (this.currentDong) {
			dong = this.currentDong.map(function (elem) {
				return elem.label;
			});
		}

		// 우편번호
		if (this.currentZipcode) {
			zipcode = this.currentZipcode.map(function (elem) {
				return elem.value;
			});
		}

		// 침투율 데이터 조회
		this.approachAnalysisService.getApproach(sido, sigungu, dong, zipcode, this.startDate, this.endDate).then(result => {
			if (CommonConstant.CODE.RESULT_CODE.SUCCESS === result.code) {
				if (environment.isLocalMode) {
					result = this.createTempData();
				}

				// Total 추이
				this.createChartTrend(result.data.totalList);
				// 가용율 / 비가용률
				this.createChartAvailability(result.data.shspdInetLnRateList, result.data.nonAvailabilityList);
				// 침투율 / 결합율
				this.createChartPenetration(result.data.infiltrationRateList, result.data.summationRateList);
				// 인구증가추이
				this.createChartPopulation(result.data.bldUnitRlSvcList);
				// 커버리지
				this.createCoverageList(result.data.coverage);

				// 정렬 초기화
				this.initChartSortList1();
				this.initChartSortList2();
				this.initChartSortList3();

				if (result.data.totalList && result.data.totalList.length) {

					const lastData = result.data.totalList[ result.data.totalList.length - 1 ];
					// 가용 합계
					this.totalAvailability = this.rateToPercent(lastData.shspdInetLnRate);
					// 세대수 (가용율)
					this.totalAvailFirst = lastData.maxGenCnt;
					// 가용세대수 (가용율)
					this.totalAvailSecond = lastData.shspdAvailCnt;

					// 비가용조회 합계
					this.totalInactive = this.rateToPercent(1 - lastData.shspdInetLnRate);
					// 세대수 (비가용율)
					this.totalInactiveFirst = lastData.maxGenCnt;
					// 비가용세대수 (비가용율)
					this.totalInactiveSecond = lastData.maxGenCnt - lastData.shspdAvailCnt;

					// 침투율 합계
					this.totalPenetration = this.rateToPercent(lastData.infiltrationRate);
					// 가입자수 (침투율)
					this.totalPenetrationFirst = lastData.shspdInetLnCnt;
					// B판매 (침투율)
					this.totalPenetrationSecond = lastData.bshspdInetLnCnt;
					// T판매 (침투율)
					this.totalPenetrationThird = lastData.tshspdInetLnCnt;

					// 결합율 합계
					this.totalCombination = this.rateToPercent(lastData.summationRate);
					// 유무선 결합건
					this.totalCombinationFirst = lastData.shspdWirwlCombCnt;
					// B판매 (결합건)
					this.totalCombinationSecond = lastData.bshspdWrwlCombCnt;
					// T판매 (결합건)
					this.totalCombinationThird = lastData.tshspdWrwlCombCnt;

					// 인구증가추이 합계
					this.totalPopulation = this.calcPopulationCnt(lastData.populationCnt);
				} else {
					// 가용 합계
					this.totalAvailability = 0;
					this.totalAvailFirst = 0;
					this.totalAvailSecond = 0;
					// 침투율 합계
					this.totalPenetration = 0;
					this.totalPenetrationFirst = 0;
					this.totalPenetrationSecond = 0;
					this.totalPenetrationThird = 0;
					// 결합율 합계
					this.totalCombination = 0;
					this.totalCombinationFirst = 0;
					this.totalCombinationSecond = 0;
					this.totalCombinationThird = 0;
					// 비가용조회 합계
					this.totalInactive = 0;
					this.totalInactiveFirst = 0;
					// 인구증가추이 합계
					this.totalPopulation = '0';
				}

				this.showGridNodata1 = true;
			}

			let isSejong = this.isSejong();

			if (this.currentDong && this.currentDong.length) {

				// GIS API 업데이트 되면 반영
				let zipcodeList = this.zipcodeList;
				if (this.currentZipcode.length) {
					zipcodeList = this.currentZipcode;
				}
				const zipcodes = Array.from(zipcodeList).map((value) => {
					return value.value;
				});
				this.createPolygonLayerByZipcodeData(zipcodes);
				this.showLoading(false);

				// 건물 리스트 조회
				this.showGridContainer = true;
				this.createBuildingList();

			} else if ((this.currentSigungu && this.currentSigungu.length) || isSejong) {
				const codes = Array.from(this.dongList).map((value) => {
					return value.value;
				});
				this.createPolygonLayerByBjEmdData(codes);
				this.showLoading(false);
			} else if (this.currentSido && this.currentSido.length) {
				const codes = Array.from(this.sigunguList).map((value) => {
					return value.value;
				});
				this.createPolygonLayerBySigunguData(codes);
				this.showLoading(false);
			} else {
				if (this.polygonLayer) {
					this.polygonLayer.clearLayers();
				}

				if (this.textLayer) {
					this.textLayer.clearLayers();
				}

				this.mgMap.setZoom(0);

				this.showLoading(false);
			}
		}).catch(reason => {
			this.showLoading(false);
		});

	}

	/**
	 * 맵에 텍스트 표시 on/off
	 */
	public showMapTextChange() {
		this.showMapText = !this.showMapText;

		if (this.showMapText) {
			this.mgMap.addLayer(this.textLayer);
		} else {
			this.mgMap.removeLayer(this.textLayer);
		}
	}

	/**
	 * Csv 파일 다운로드
	 *
	 * @param fileName
	 * @param grid
	 * @param totalRow
	 */
	public csvDownload(fileName: string, grid: GridComponent): void {

		if (_.isEmpty(grid)) {
			Alert.warning(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.DOWNLOAD.EXCEL.ERROR', `CSV 다운로드 오류가 발생했습니다.`));
			return;
		}

		const date: Date = new Date();
		const timestamp: string = date.getFullYear().toString() + (date.getMonth() + 1).toString() + date.getDate().toString() + date.getHours().toString() + date.getMinutes().toString();

		grid.customAppCsvDownload(`${fileName}-${timestamp}`);
	}

	/**
	 * 가용율 / 비가용율 정렬 선택
	 *
	 * @param item
	 */
	public sortSelect1(item: SelectValue) {

		let sortLabelList = [];
		if (item.value == '01' || item.value == '02') {
			this.chartData1.sort(function (a, b) {
				if (item.value == '01') {
					// 가용율 내림차순
					return a.value > b.value ? -1 : a.value < b.value ? 1 : 0;
				} else {
					// 가용율 오름차순
					return a.value < b.value ? -1 : a.value > b.value ? 1 : 0;
				}
			});

			Array.from(this.chartData1).forEach(value => {
				sortLabelList.push(value.label);
			});
		} else if (item.value == '03' || item.value == '04') {
			this.chartData1.sort(function (a, b) {
				if (item.value == '03') {
					// 공동주택 가용율 내림차순
					return a.multihouseValue > b.multihouseValue ? -1 : a.multihouseValue < b.multihouseValue ? 1 : 0;
				} else {
					// 공동주택 가용율 오름차순
					return a.multihouseValue < b.multihouseValue ? -1 : a.multihouseValue > b.multihouseValue ? 1 : 0;
				}
			});

			Array.from(this.chartData1).forEach(value => {
				sortLabelList.push(value.label);
			});
		} else if (item.value == '05' || item.value == '06') {
			this.chartData1.sort(function (a, b) {
				if (item.value == '05') {
					// 일반주택 가용율 내림차순
					return a.generalhouseValue > b.generalhouseValue ? -1 : a.generalhouseValue < b.generalhouseValue ? 1 : 0;
				} else {
					// 일반주택 가용율 오름차순
					return a.generalhouseValue < b.generalhouseValue ? -1 : a.generalhouseValue > b.generalhouseValue ? 1 : 0;
				}
			});

			Array.from(this.chartData1).forEach(value => {
				sortLabelList.push(value.label);
			});
		} else if (item.value == '07' || item.value == '08') {
			this.chartData1.sort(function (a, b) {
				if (item.value == '07') {
					// 공동주택 가용세대수 내림차순
					return a.multihouseShspdAvailCnt > b.multihouseShspdAvailCnt ? -1 : a.multihouseShspdAvailCnt < b.multihouseShspdAvailCnt ? 1 : 0;
				} else {
					// 공동주택 가용세대수 오름차순
					return a.multihouseShspdAvailCnt < b.multihouseShspdAvailCnt ? -1 : a.multihouseShspdAvailCnt > b.multihouseShspdAvailCnt ? 1 : 0;
				}
			});

			Array.from(this.chartData1).forEach(value => {
				sortLabelList.push(value.label);
			});
		} else if (item.value == '09' || item.value == '10') {
			this.chartData1.sort(function (a, b) {
				if (item.value == '09') {
					// 일반주택 가용세대수 내림차순
					return a.generalhouseShspdAvailCnt > b.generalhouseShspdAvailCnt ? -1 : a.generalhouseShspdAvailCnt < b.generalhouseShspdAvailCnt ? 1 : 0;
				} else {
					// 일반주택 가용세대수 오름차순
					return a.generalhouseShspdAvailCnt < b.generalhouseShspdAvailCnt ? -1 : a.generalhouseShspdAvailCnt > b.generalhouseShspdAvailCnt ? 1 : 0;
				}
			});

			Array.from(this.chartData1).forEach(value => {
				sortLabelList.push(value.label);
			});
		} else if (item.value == '11' || item.value == '12') {
			this.chartData4.sort(function (a, b) {
				if (item.value == '11') {
					// 비가용 내림차순
					return a.value > b.value ? -1 : a.value < b.value ? 1 : 0;
				} else {
					// 비가용 오름차순
					return a.value < b.value ? -1 : a.value > b.value ? 1 : 0;
				}
			});

			Array.from(this.chartData4).forEach(value => {
				sortLabelList.push(value.label);
			});
		} else {
			this.chartData4.sort(function (a, b) {
				if (item.value == '13') {
					// 비가용 세대수 내림차순
					return a.nonAvailability > b.nonAvailability ? -1 : a.nonAvailability < b.nonAvailability ? 1 : 0;
				} else {
					// 비가용 세대수 오름차순
					return a.nonAvailability < b.nonAvailability ? -1 : a.nonAvailability > b.nonAvailability ? 1 : 0;
				}
			});

			Array.from(this.chartData4).forEach(value => {
				sortLabelList.push(value.label);
			});
		}

		// 침투율 / 결합율 정렬 초기화
		this.initChartSortList2();
		// 인구수 정렬 초기화
		this.initChartSortList3();
		// 라벨로 차트 정렬 변경
		this.chartSortByLabel(sortLabelList);
	}

	/**
	 * 침투율 / 결합율 정렬 선택
	 * @param item
	 */
	public sortSelect2(item: SelectValue) {

		let sortLabelList = [];
		if (item.value == '01' || item.value == '02') {
			this.chartData2.sort(function (a, b) {
				if (item.value == '01') {
					// 내림차순
					return a.value > b.value ? -1 : a.value < b.value ? 1 : 0;
				} else {
					// 오름차순
					return a.value < b.value ? -1 : a.value > b.value ? 1 : 0;
				}
			});

			Array.from(this.chartData2).forEach(value => {
				sortLabelList.push(value.label);
			});
		} else if (item.value == '03' || item.value == '04') {
			this.chartData3.sort(function (a, b) {
				if (item.value == '03') {
					// 내림차순
					return a.value > b.value ? -1 : a.value < b.value ? 1 : 0;
				} else {
					// 오름차순
					return a.value < b.value ? -1 : a.value > b.value ? 1 : 0;
				}
			});

			Array.from(this.chartData3).forEach(value => {
				sortLabelList.push(value.label);
			});
		} else if (item.value == '05' || item.value == '06') {
			this.chartData2.sort(function (a, b) {
				if (item.value == '05') {
					// 공동주택 침투율 내림차순
					return a.multihouseInfiltrationRate > b.multihouseInfiltrationRate ? -1 : a.multihouseInfiltrationRate < b.multihouseInfiltrationRate ? 1 : 0;
				} else {
					// 공동주택 침투율 오름차순
					return a.multihouseInfiltrationRate < b.multihouseInfiltrationRate ? -1 : a.multihouseInfiltrationRate > b.multihouseInfiltrationRate ? 1 : 0;
				}
			});

			Array.from(this.chartData2).forEach(value => {
				sortLabelList.push(value.label);
			});
		} else if (item.value == '07' || item.value == '08') {
			this.chartData2.sort(function (a, b) {
				if (item.value == '07') {
					// 일반주택 침투율 내림차순
					return a.generalhouseInfiltrationRate > b.generalhouseInfiltrationRate ? -1 : a.generalhouseInfiltrationRate < b.generalhouseInfiltrationRate ? 1 : 0;
				} else {
					// 일반주택 침투율 오름차순
					return a.generalhouseInfiltrationRate < b.generalhouseInfiltrationRate ? -1 : a.generalhouseInfiltrationRate > b.generalhouseInfiltrationRate ? 1 : 0;
				}
			});

			Array.from(this.chartData2).forEach(value => {
				sortLabelList.push(value.label);
			});
		} else if (item.value == '09' || item.value == '10') {
			this.chartData3.sort(function (a, b) {
				if (item.value == '09') {
					// 공동주택 결합율 내림차순
					return a.multihouseSummationRate > b.multihouseSummationRate ? -1 : a.multihouseSummationRate < b.multihouseSummationRate ? 1 : 0;
				} else {
					// 공동주택 결합율 오름차순
					return a.multihouseSummationRate < b.multihouseSummationRate ? -1 : a.multihouseSummationRate > b.multihouseSummationRate ? 1 : 0;
				}
			});

			Array.from(this.chartData3).forEach(value => {
				sortLabelList.push(value.label);
			});
		} else {
			this.chartData3.sort(function (a, b) {
				if (item.value == '11') {
					// 일반주택 결합율 내림차순
					return a.generalhouseSummationRate > b.generalhouseSummationRate ? -1 : a.generalhouseSummationRate < b.generalhouseSummationRate ? 1 : 0;
				} else {
					// 일반주택 결합율 오름차순
					return a.generalhouseSummationRate < b.generalhouseSummationRate ? -1 : a.generalhouseSummationRate > b.generalhouseSummationRate ? 1 : 0;
				}
			});

			Array.from(this.chartData3).forEach(value => {
				sortLabelList.push(value.label);
			});
		}

		// 가용율 / 비가용율 정렬 초기화
		this.initChartSortList1();
		// 인구수 정렬 초기화
		this.initChartSortList3();
		// 라벨로 차트 정렬 변경
		this.chartSortByLabel(sortLabelList);
	}

	/**
	 * 인구수 정렬 선택
	 *
	 * @param item
	 */
	public sortSelect3(item: SelectValue) {

		this.chartData5.sort(function (a, b) {
			if (item.value == '01') {
				// 내림차순
				return a.value > b.value ? -1 : a.value < b.value ? 1 : 0;
			} else {
				// 오름차순
				return a.value < b.value ? -1 : a.value > b.value ? 1 : 0;
			}
		});

		let sortLabelList = [];
		Array.from(this.chartData5).forEach(value => {
			sortLabelList.push(value.label);
		});

		// 가용율 / 비가용율 정렬 초기화
		this.initChartSortList1();
		// 침투율 / 결합율 정렬 초기화
		this.initChartSortList2();
		// 라벨로 차트 정렬 변경
		this.chartSortByLabel(sortLabelList);
	}

	/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	 | Protected Method
	 |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

	/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	 | Private Method
	 |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

	/**
	 * 날짜 선택
	 */
	private minMaxDateSelect() {
		const selectedDates = this.minMaxDate.selectedDates;
		if (selectedDates.length > 1) {
			this.startDate = selectedDates[ 0 ];
			this.endDate = selectedDates[ 1 ];

			this.searchClick();
		} else {
			this.endDate = null;
		}
	}

	/**
	 * 맵 feature 클릭
	 * @param e
	 */
	private mapFeatureClick(e) {
		const feature = e.target.feature;

		if (feature.zipcode) {
			// 우편번호로 map layer 생성한 경우

			// 우편번호 select 데이터 checked 수정
			let tempArray = _.clone(this.zipcodeList);
			Array.from(this.zipcodeList).forEach((value) => {
				if (value.value == feature.zipcode) {
					value.checked = true;
				} else {
					value.checked = false;
				}
			});
			this.zipcodeList = tempArray;
			this.zipcodeSelect([ new SelectValue(feature.zipcode, feature.zipcode, true) ], true);
		} else if (feature.dongCode) {
			// 법정동코드로 map layer 생성한 경우

			let dongLabel = '';
			// 읍/면/동 select 데이터 checked 수정
			let tempArray = _.clone(this.dongList);
			Array.from(this.dongList).forEach((value) => {
				if (value.value == feature.dongCode) {
					value.checked = true;
					dongLabel = value.label;
				} else {
					value.checked = false;
				}
			});
			this.dongList = tempArray;
			this.dongSelect([ new SelectValue(dongLabel, feature.dongCode, true) ], true);
		} else if (feature.sigunguCode) {
			// 시군구코드로 map layer 생성한 경우

			let sigunguLabel = '';
			// 읍/면/동 select 데이터 checked 수정
			let tempArray = _.clone(this.sigunguList);
			Array.from(this.sigunguList).forEach((value) => {
				if (value.value == feature.sigunguCode) {
					value.checked = true;
					sigunguLabel = value.label;
				} else {
					value.checked = false;
				}
			});
			this.sigunguList = tempArray;
			this.sigunguSelect(new SelectValue(sigunguLabel, feature.sigunguCode, true), true);
		} else {
			// 침투율 조회
			this.searchClick();
		}

		//클릭시 맵으로 이벤트 전달되는것을 방지
		L.DomEvent.stopPropagation(e);
	}

	/**
	 * 지도 생성 by 시군구코드
	 */
	public createPolygonLayerBySigunguData(codes: string[]) {
		this.polygonLayer.clearLayers();
		this.textLayer.clearLayers();
		if (!this.showMapText) {
			this.mgMap.removeLayer(this.textLayer);
		}

		const self = this;
		let loadCount = 0;
		Array.from(codes).forEach((value, index) => {
			L.MG.Api.getSggByCode(value, { geometry: true, bounds: true }).then(function (result) {
				var polygonJsons = [], textJsons = [],
					geojson, properties;

				Array.from(result).forEach(function (item: any, index) {
					properties = {
						type: 'emd',
						code: item.SGG_CODE,
						name: item.SGG_NAME
					};
					// 폴리곤
					geojson = L.MG.Util.wktToGeoJSON(item.GEOM);
					geojson.properties = properties;
					geojson[ 'sigunguCode' ] = value; 	//custom value (클릭 이벤트에서 사용)
					polygonJsons.push(geojson);

					// 텍스트
					textJsons.push({
						type: 'Feature',
						geometry: {
							type: 'Point',
							coordinates: [ item.COORD_X, item.COORD_Y ]
						},
						properties: properties,
						sigunguCode: value	//custom value (클릭 이벤트에서 사용)
					});
				});

				self.polygonLayer.addData(polygonJsons);
				self.textLayer.addData(textJsons);

				if (index == codes.length - 1) {
					self.mgMap.setMaxBounds(self.polygonLayer.getBounds());
					self.mgMap.fitBounds(self.polygonLayer.getBounds());
				}
			});
		});
	}

	/**
	 * 지도 생성 by 법정동코드
	 */
	public createPolygonLayerByBjEmdData(codes: string[]) {
		this.polygonLayer.clearLayers();
		this.textLayer.clearLayers();
		if (!this.showMapText) {
			this.mgMap.removeLayer(this.textLayer);
		}

		const self = this;
		Array.from(codes).forEach((value, index) => {
			L.MG.Api.getBJEmdByCode(value, { geometry: true, bounds: true }).then(function (result) {
				var polygonJsons = [], textJsons = [],
					geojson, properties;

				Array.from(result).forEach(function (item: any, index) {
					properties = {
						type: 'emd',
						code: item.ADMCODE,
						name: item.EMD_NAME
					};
					// 폴리곤
					geojson = L.MG.Util.wktToGeoJSON(item.GEOM);
					geojson.properties = properties;
					geojson[ 'dongCode' ] = value; 	//custom value (클릭 이벤트에서 사용)
					polygonJsons.push(geojson);

					// 텍스트
					textJsons.push({
						type: 'Feature',
						geometry: {
							type: 'Point',
							coordinates: [ item.COORD_X, item.COORD_Y ]
						},
						properties: properties,
						dongCode: value	//custom value (클릭 이벤트에서 사용)
					});
				});

				self.polygonLayer.addData(polygonJsons);
				self.textLayer.addData(textJsons);

				if (index == codes.length - 1) {
					self.mgMap.setMaxBounds(self.polygonLayer.getBounds());
					self.mgMap.fitBounds(self.polygonLayer.getBounds());
				}
			});
		});
	}

	/**
	 * 지도 생성 by 우편번호
	 */
	public createPolygonLayerByZipcodeData(posts: string[]) {
		this.polygonLayer.clearLayers();
		this.textLayer.clearLayers();
		if (!this.showMapText) {
			this.mgMap.removeLayer(this.textLayer);
		}

		if (L.MG.Api.hasOwnProperty('getPostByCode')) {

			const self = this;
			Array.from(posts).forEach((value, index) => {
				L.MG.Api.getPostByCode(value, { geometry: true, bounds: true }).then(function (result) {
					var polygonJsons = [], textJsons = [],
						geojson, properties;

					// Array.from(result).forEach(function (item: any, index) {
					properties = {
						type: 'zipcode',
						code: result.POST_CD,
						name: result.POST_CD
					};
					// 폴리곤
					geojson = L.MG.Util.wktToGeoJSON(result.GEOM);
					geojson.properties = properties;
					geojson[ 'zipcode' ] = value; 	//custom value (클릭 이벤트에서 사용)
					polygonJsons.push(geojson);

					// 텍스트
					textJsons.push({
						type: 'Feature',
						geometry: {
							type: 'Point',
							coordinates: [ result.COORD_X, result.COORD_Y ]
						},
						properties: properties,
						zipcode: value	//custom value (클릭 이벤트에서 사용)
					});
					// });

					self.polygonLayer.addData(polygonJsons);
					self.textLayer.addData(textJsons);

					if (index == posts.length - 1) {
						self.mgMap.setMaxBounds(self.polygonLayer.getBounds());
						self.mgMap.fitBounds(self.polygonLayer.getBounds());
					}
				});
			});
		}

	}

	// 테스트 데이터 생성
	private createTempData() {
		let returnObj: ApproachAnalysis.ListResult = new ApproachAnalysis.ListResult();
		returnObj.data = new ApproachAnalysis.List();

		let data = [];
		let data1;
		let data2;
		for (var i = 0; i < 30; i++) {
			let a = new ApproachAnalysis.Entity();
			a.eventTime = '2018-07-' + (i < 10 ? '0' + i : i);
			a.populationCnt = Math.random() * 2000000 + 10000000;
			a.maxGenCnt = Math.random() * 1000000;
			a.shspdAvailCnt = Math.random() * a.maxGenCnt;
			a.shspdInetLnRate = a.shspdAvailCnt / a.maxGenCnt;
			a.shspdInetLnCnt = Math.random() * 1000000;
			a.bshspdInetLnCnt = Math.random() * a.shspdInetLnCnt;
			a.tshspdInetLnCnt = a.shspdInetLnCnt - a.bshspdInetLnCnt;
			a.shspdWirwlCombCnt = Math.random() * 1000000;
			a.infiltrationRate = a.shspdInetLnCnt / a.shspdAvailCnt;
			a.summationRate = a.shspdInetLnRate * (a.shspdWirwlCombCnt / a.shspdInetLnCnt);

			data.push(a);
		}
		returnObj.data.totalList = data;

		data1 = [];
		data2 = [];
		for (var i = 0; i < 30; i++) {
			let a = new ApproachAnalysis.Entity();
			let ran = Math.random();
			a.label = 'label ' + i;
			a.value = ran;
			a.shspdAvailCnt = Math.random() * 10;
			a.maxGenCnt = Math.random() * 10;
			a.multihouseShspdAvailCnt = Math.random() * 10;
			a.multihouseValue = Math.random() * a.value;
			a.generalhouseShspdAvailCnt = Math.random() * 10;
			a.generalhouseValue = a.value - a.multihouseValue;
			a.multihouseShspdInetLnCnt = Math.random() * 10;
			a.generalhouseShspdInetLnCnt = Math.random() * 10;

			data1.push(a);

			let b = new ApproachAnalysis.Entity();
			b.label = 'label ' + i;
			b.value = 1 - ran;
			b.nonAvailability = Math.random() * 10;
			b.availability = Math.random() * 10;
			data2.push(b);
		}
		returnObj.data.shspdInetLnRateList = data1;
		returnObj.data.nonAvailabilityList = data2;

		data1 = [];
		data2 = [];
		for (var i = 0; i < 30; i++) {
			let a = new ApproachAnalysis.Entity();
			a.label = 'label ' + i;
			a.value = Math.random();
			a.shspdInetLnCnt = Math.random() * 10;
			a.maxGenCnt = Math.random() * 10;
			a.multihouseBInfiltrationRate = Math.random() * a.value;
			a.multihouseTInfiltrationRate = Math.random() * (a.value - a.multihouseBInfiltrationRate);
			a.multihouseInfiltrationRate = a.multihouseBInfiltrationRate + a.multihouseTInfiltrationRate;
			a.generalhouseBInfiltrationRate = Math.random() * (a.value - a.multihouseBInfiltrationRate - a.multihouseTInfiltrationRate);
			a.generalhouseTInfiltrationRate = a.value - a.multihouseBInfiltrationRate - a.multihouseTInfiltrationRate - a.generalhouseBInfiltrationRate;
			a.generalhouseInfiltrationRate = a.generalhouseBInfiltrationRate + a.generalhouseTInfiltrationRate;
			data1.push(a);

			let b = new ApproachAnalysis.Entity();
			b.label = 'label ' + i;
			b.value = Math.random();
			b.infiltrationRate = Math.random() * 10;
			b.shspdWirwlCombCnt = Math.random() * 10;
			b.shspdInetLnCnt = Math.random() * 10;
			b.multihouseBSummationRate = Math.random() * b.value;
			b.multihouseTSummationRate = Math.random() * (b.value - b.multihouseBSummationRate);
			b.multihouseSummationRate = b.multihouseBSummationRate + b.multihouseTSummationRate;
			b.generalhouseBSummationRate = Math.random() * (b.value - b.multihouseBSummationRate - b.multihouseTSummationRate);
			b.generalhouseTSummationRate = b.value - b.multihouseBSummationRate - b.multihouseTSummationRate - b.generalhouseBSummationRate;
			b.generalhouseSummationRate = b.generalhouseBSummationRate + b.generalhouseTSummationRate;
			data2.push(b);
		}
		returnObj.data.infiltrationRateList = data1;
		returnObj.data.summationRateList = data2;

		data = [];
		for (var i = 0; i < 30; i++) {
			let a = new ApproachAnalysis.Entity();
			let ran = Math.random() * 1000000;
			a.label = 'label ' + i;
			a.value = ran;
			a.shspdAvailCnt = Math.random() * 10;
			a.maxGenCnt = Math.random() * 10;
			data.push(a);
		}
		returnObj.data.bldUnitRlSvcList = data;

		return returnObj;
	}

	/**
	 * 인구증가/가용율/침투율/유무선 결합율 추이
	 */
	private createChartTrend(data: ApproachAnalysis.Entity[] = null) {
	if (!data || !data.length) {
		if (this.chart) {
			this.chart.dispose();
			this.chart = null;
		}

		this.showChartNodata = true;
		return;
	}

	var option = null;
	if (this.chart) {
		option = this.chart.getOption();
	} else {

		var dom = document.getElementById('chart');
		this.chart = echarts.init(dom);
		const self = this;
		option = {
			tooltip: {
				trigger: 'axis',
				axisPointer: {
					type: 'shadow'
				}
			},
			legend: {
				data: [ this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TREND.LEGEND1', '인구증가 추이'),
					this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TREND.LEGEND2', '가용율 추이'),
					this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TREND.LEGEND3', '침투율 추이'),
					this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TREND.LEGEND4', '유무선 결합율 추이') ],
				bottom: 0
			},
			grid: {
				left: '3%',
				right: '4%',
				bottom: '10%',
				top: '90px',
				containLabel: true
			},
			xAxis: [
				{
					type: 'category',
					axisTick: { show: false }
				}
			],
			yAxis: [
				{
					type: 'value',
					axisLabel: {
						formatter: '{value} %'
					}
				},
				{
					type: 'value',
					position: 'right',
					scale: true,
					axisLabel: {
						formatter: function (value) {
							return self.calcPopulationCnt(value) + '천명';
						}
					}
				}
			]

		};
	}

	let data1 = [];
	let data2 = [];
	let data3 = [];
	let data4 = [];

	this.totalExceptDateCount = 0;
	Array.from(data).forEach((value) => {
		if (value.populationCnt == 0 && value.shspdInetLnRate == 0 &&
			value.infiltrationRate == 0 && value.summationRate == 0) {
			// 값이 전부 0일 경우 데이터가 없는 날이라 판단
			this.totalExceptDateCount++;
		} else {
			let date = value.eventTime ? value.eventTime.substr(0, 10) : '';
			data1.push([ date, value.populationCnt ]);
			data2.push([ date, this.rateToPercent(value.shspdInetLnRate) ]);
			data3.push([ date, this.rateToPercent(value.infiltrationRate) ]);
			data4.push([ date, this.rateToPercent(value.summationRate) ]);
		}
	});

	let series = [
		{
			name: this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TREND.LEGEND1', '인구증가 추이'),
			type: 'line',
			yAxisIndex: 1,
			itemStyle: {
				color: '#f3774b'
			},
			data: data1
		},
		{
			name: this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TREND.LEGEND2', '가용율 추이'),
			type: 'line',
			itemStyle: {
				color: '#00d3d1'
			},
			data: data2
		},
		{
			name: this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TREND.LEGEND3', '침투율 추이'),
			type: 'line',
			itemStyle: {
				color: '#c24ee8'
			},
			data: data3
		},
		{
			name: this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TREND.LEGEND4', '유무선 결합율 추이'),
			type: 'line',
			itemStyle: {
				color: '#f2ab25'
			},
			data: data4
		}
	];

	option.series = series;

	this.chart.setOption(option, true);

	this.showChartNodata = false;
}

	/**
	 * 가용율 / 비가용률 차트 생성
	 */
	private createChartAvailability(data1: ApproachAnalysis.Entity[] = null, data2: ApproachAnalysis.Entity[] = null) {
		if ((!data1 || !data1.length) && (!data2 || !data2.length)) {
			if (this.chart1) {
				this.chart1.dispose();
				this.chart1 = null;
			}

			this.showChartNodata1 = true;
			this.totalAvailability = 0;
			this.totalInactive = 0;
			return;
		}

		this.chartData1 = data1;
		this.chartData4 = data2;
		var option = null;
		if (this.chart1) {
			option = this.chart1.getOption();
		} else {

			var dom = document.getElementById('chart1');
			this.chart1 = echarts.init(dom);
			const self = this;
			option = {
				tooltip: {
					trigger: 'axis',
					axisPointer: {
						type: 'shadow'
					},
					formatter: function (params) {
						const d1 = self.chartData1[ params[ 0 ].dataIndex ];
						const d2 = self.chartData4[ params[ 0 ].dataIndex ];

						let seriesIndexex = [];
						Array.from(params).forEach(value => {
							seriesIndexex.push(value[ 'seriesIndex' ]);
						});

						let tooltip = '';
						if (seriesIndexex.indexOf(0) > -1 || seriesIndexex.indexOf(1) > -1) {
							tooltip = self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE1', '가용율') + ' : ' + self.rateToPercent(d1.value) + '<br>' +
								'가용세대수 / 세대수<br>' +
								d1.shspdAvailCnt + ' / ' + d1.maxGenCnt +
								'<br><br>';
						}

						if (seriesIndexex.indexOf(0) > -1) {
							tooltip += self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE1_1', '공동주택 가용율') + ' : ' + self.rateToPercent(d1.multihouseValue) + '<br>' +
								'공동주택 가용세대수 / 세대수<br>' +
								d1.multihouseShspdAvailCnt + ' / ' + d1.maxGenCnt +
								'<br><br>';
						}

						if (seriesIndexex.indexOf(1) > -1) {
							tooltip += self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE1_2', '일반주택 가용율') + ' : ' + self.rateToPercent(d1.generalhouseValue) + '<br>' +
								'일반주택 가용세대수 / 세대수<br>' +
								d1.generalhouseShspdAvailCnt + ' / ' + d1.maxGenCnt +
								'<br><br>';
						}

						if (seriesIndexex.indexOf(2) > -1) {
							tooltip += self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE4', '비가용율') + ' : ' + self.rateToPercent(d2.value) + '<br>' +
								'비가용 세대수 / 세대수<br>' +
								d2.nonAvailability + ' / ' + d2.maxGenCnt +
								'<br><br>';
						}

						if (tooltip.lastIndexOf('<br><br>') > -1) {
							tooltip = tooltip.substr(0, tooltip.lastIndexOf('<br><br>'));
						}

						return params[ 0 ].name + '<br>' + tooltip;
					}
				},
				legend: {
					data: [
						this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE1_1', '공동주택 가용율'),
						this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE1_2', '일반주택 가용율'),
						this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE4', '비가용율')
					],
					bottom: 0
				},
				grid: {
					left: '3%',
					right: '4%',
					bottom: '10%',
					top: '5%',
					containLabel: true
				},
				xAxis: [
					{
						type: 'category',
						axisTick: { show: false },
						axisLabel: {
							color: '#333',
							rotate: 40
						},
						axisLine: {
							lineStyle: {
								color: '#cccccc'
							}
						}
					}
				],
				yAxis: [
					{
						type: 'value',
						axisLabel: {
							formatter: '{value} %'
						}
					}
				]

			};

			this.chart1.on('click', function (params) {
				self.chartItemClick(params.data[ 0 ]);
			});
		}

		let chartData1_1 = [];
		let chartData1_2 = [];
		let chartData2 = [];

		Array.from(data1).forEach((value) => {
			chartData1_1.push([ value.label, this.rateToPercent(value.multihouseValue) ]);
			chartData1_2.push([ value.label, this.rateToPercent(value.generalhouseValue) ]);
		});

		Array.from(data2).forEach((value) => {
			chartData2.push([ value.label, this.rateToPercent(value.value) ]);
		});

		let series = [
			{
				name: this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE1_1', '공동주택 가용율'),
				type: 'bar',
				// barCategoryGap: '50%',
				// barWidth: 14,
				stack: '1',
				itemStyle: {
					color: '#00b2b0'
				},
				data: chartData1_1
			},
			{
				name: this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE1_2', '일반주택 가용율'),
				type: 'bar',
				// barCategoryGap: '50%',
				// barWidth: 14,
				stack: '1',
				itemStyle: {
					color: '#00d3d1'
				},
				data: chartData1_2
			},
			{
				name: this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE4', '비가용율'),
				type: 'bar',
				// barCategoryGap: '50%',
				// barWidth: 14,
				stack: '1',
				itemStyle: {
					color: '#e970a9'
				},
				data: chartData2
			}
		];

		option.series = series;

		this.chart1.setOption(option, true);

		this.showChartNodata1 = false;
	}

	/**
	 * 침투율 / 결합율 차트 생성
	 */
	private createChartPenetration(data1: ApproachAnalysis.Entity[] = [], data2: ApproachAnalysis.Entity[] = []) {
		if ((!data1 || !data1.length) && (!data2 || !data2.length)) {
			if (this.chart2) {
				this.chart2.dispose();
				this.chart2 = null;
			}

			this.showChartNodata2 = true;
			this.totalPenetration = 0;
			this.totalCombination = 0;
			return;
		}

		this.chartData2 = data1;
		this.chartData3 = data2;
		var option = null;
		if (this.chart2) {
			option = this.chart2.getOption();
		} else {

			var dom = document.getElementById('chart2');
			this.chart2 = echarts.init(dom);
			const self = this;
			option = {
				tooltip: {
					trigger: 'axis',
					axisPointer: {
						type: 'shadow'
					},
					textStyle: {
						fontSize: 8
					},
					formatter: function (params) {
						const d1 = self.chartData2[ params[ 0 ].dataIndex ];
						const d2 = self.chartData3[ params[ 0 ].dataIndex ];

						let seriesIndexex = [];
						Array.from(params).forEach(value => {
							seriesIndexex.push(value[ 'seriesIndex' ]);
						});

						let tooltip = '';
						if (seriesIndexex.indexOf(0) > -1 || seriesIndexex.indexOf(1) > -1 || seriesIndexex.indexOf(2) > -1 || seriesIndexex.indexOf(3) > -1) {
							tooltip = self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE2', '침투율') + ' : ' + self.rateToPercent(d1.value) + '<br>' +
								'초고속인터넷회선수 / 가용세대수<br>' +
								d1.shspdInetLnCnt + ' / ' + d1.maxGenCnt + '<br><br>';
						}

						if (seriesIndexex.indexOf(0) > -1) {
							tooltip += self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE2_1', '공동주택 B 침투율') + ' : ' + self.rateToPercent(d1.multihouseBInfiltrationRate) + '<br>' +
								'공동주택 B판매 초고속인터넷회선수 / 가용세대수<br>' +
								d1.multihouseBShspdInetLnCnt + ' / ' + d1.maxGenCnt + '<br><br>';
						}

						if (seriesIndexex.indexOf(1) > -1) {
							tooltip += self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE2_2', '공동주택 T침투율') + ' : ' + self.rateToPercent(d1.multihouseTInfiltrationRate) + '<br>' +
								'공동주택 T판매 초고속인터넷회선수 / 가용세대수<br>' +
								d1.multihouseTShspdInetLnCnt + ' / ' + d1.maxGenCnt + '<br><br>';
						}

						if (seriesIndexex.indexOf(2) > -1) {
							tooltip += self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE2_3', '일반주택 B 침투율') + ' : ' + self.rateToPercent(d1.generalhouseBInfiltrationRate) + '<br>' +
								'일반주택 B판매 초고속인터넷회선수 / 가용세대수<br>' +
								d1.generalhouseBShspdInetLnCnt + ' / ' + d1.maxGenCnt + '<br><br>';
						}

						if (seriesIndexex.indexOf(3) > -1) {
							tooltip += self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE2_4', '일반주택 T 침투율') + ' : ' + self.rateToPercent(d1.generalhouseTInfiltrationRate) + '<br>' +
								'일반주택 T판매 초고속인터넷회선수 / 가용세대수<br>' +
								d1.generalhouseTShspdInetLnCnt + ' / ' + d1.maxGenCnt + '<br><br>';
						}

						if (seriesIndexex.indexOf(4) > -1) {
							tooltip += self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE3', '결합율') + ' : ' + self.rateToPercent(d2.value) + '<br>' +
								'침투율 * (유무선결합건 / 초고속인터넷회선수)<br>' +
								d2.infiltrationRate + ' * (' + d2.shspdWirwlCombCnt + ' / ' + d2.shspdInetLnCnt + ')' + '<br><br>' +
								self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE3_1', '공동주택 B 결합율') + ' : ' + self.rateToPercent(d2.multihouseBSummationRate) + '<br>' +
								'공동주택 B 침투율 * (공동주택 B판매 유무선결합건 / 공동주택 B판매 초고속인터넷회선수)<br>' +
								d2.multihouseBInfiltrationRate + ' * (' + d2.multihouseBShspdWrwlCombCnt + ' / ' + d2.multihouseBShspdInetLnCnt + ')' + '<br><br>' +
								self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE3_2', '공동주택 T 결합율') + ' : ' + self.rateToPercent(d2.multihouseTSummationRate) + '<br>' +
								'공동주택 T 침투율 * (공동주택 T판매 유무선결합건 / 공동주택 T판매 초고속인터넷회선수)<br>' +
								d2.multihouseTInfiltrationRate + ' * (' + d2.multihouseTShspdWrwlCombCnt + ' / ' + d2.multihouseTShspdInetLnCnt + ')' + '<br><br>' +
								self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE3_3', '일반주택 B 결합율') + ' : ' + self.rateToPercent(d2.generalhouseBSummationRate) + '<br>' +
								'일반주택 B 침투율 * (일반주택 B판매 유무선결합건 / 일반주택 B판매 초고속인터넷회선수)<br>' +
								d2.generalhouseBInfiltrationRate + ' * (' + d2.generalhouseBShspdWrwlCombCnt + ' / ' + d2.generalhouseBShspdInetLnCnt + ')' + '<br><br>' +
								self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE3_4', '일반주택 T 결합율') + ' : ' + self.rateToPercent(d2.generalhouseTSummationRate) + '<br>' +
								'일반주택 T 침투율 * (일반주택 T판매 유무선결합건 / 일반주택 T판매 초고속인터넷회선수)<br>' +
								d2.generalhouseTInfiltrationRate + ' * (' + d2.generalhouseTShspdWrwlCombCnt + ' / ' + d2.generalhouseTShspdInetLnCnt + ')' + '<br><br>';
						}

						if (tooltip.lastIndexOf('<br><br>') > -1) {
							tooltip = tooltip.substr(0, tooltip.lastIndexOf('<br><br>'));
						}

						return params[ 0 ].name + '<br>' + tooltip;
					}
				},
				legend: {
					data: [
						this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE2_1', '공동주택 B 침투율'),
						this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE2_2', '공동주택 T 침투율'),
						this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE2_3', '일반주택 B 침투율'),
						this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE2_4', '일반주택 T 침투율'),
						this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE3', '결합율')
					],
					bottom: 0
				},
				grid: {
					left: '3%',
					right: '4%',
					bottom: '10%',
					top: '5%',
					containLabel: true
				},
				xAxis: [
					{
						type: 'category',
						axisTick: { show: false },
						axisLabel: {
							color: '#333',
							rotate: 40
						},
						axisLine: {
							lineStyle: {
								color: '#cccccc'
							}
						}
					}
				],
				yAxis: [
					{
						type: 'value',
						axisLabel: {
							formatter: '{value} %'
						}
					}
				]

			};

			this.chart2.on('click', function (params) {
				self.chartItemClick(params.data[ 0 ]);
			});
		}

		let chartData1_1 = [];
		let chartData1_2 = [];
		let chartData1_3 = [];
		let chartData1_4 = [];
		let chartData2 = [];

		Array.from(data1).forEach((value) => {
			chartData1_1.push([ value.label, this.rateToPercent(value.multihouseBInfiltrationRate) ]);
			chartData1_2.push([ value.label, this.rateToPercent(value.multihouseTInfiltrationRate) ]);
			chartData1_3.push([ value.label, this.rateToPercent(value.generalhouseBInfiltrationRate) ]);
			chartData1_4.push([ value.label, this.rateToPercent(value.generalhouseTInfiltrationRate) ]);
		});

		Array.from(data2).forEach((value) => {
			chartData2.push([ value.label, this.rateToPercent(value.value) ]);
		});

		let series = [
			{
				name: this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE2_1', '공동주택 B 침투율'),
				type: 'bar',
				// barCategoryGap: '50%',
				// barWidth: 14,
				stack: '1',
				itemStyle: {
					color: '#c24ee8'
				},
				data: chartData1_1
			},
			{
				name: this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE2_2', '공동주택 T 침투율'),
				type: 'bar',
				// barCategoryGap: '50%',
				// barWidth: 14,
				stack: '1',
				itemStyle: {
					color: '#e184ff'
				},
				data: chartData1_2
			},
			{
				name: this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE2_3', '일반주택 B 침투율'),
				type: 'bar',
				stack: '1',
				// barCategoryGap: '50%',
				// barWidth: 14,
				itemStyle: {
					color: '#4d80ff'
				},
				data: chartData1_3
			},
			{
				name: this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE2_4', '일반주택 T 침투율'),
				type: 'bar',
				stack: '1',
				// barCategoryGap: '50%',
				// barWidth: 14,
				itemStyle: {
					color: '#3bc6ff'
				},
				data: chartData1_4
			},
			{
				name: this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE3', '결합율'),
				type: 'line',
				// barCategoryGap: '50%',
				// barWidth: 14,
				itemStyle: {
					color: '#f2ab25'
				},
				data: chartData2
			}
		];

		option.series = series;

		this.chart2.setOption(option, true);

		this.showChartNodata2 = false;
	}

	/**
	 * 인구증가 추이 차트 생성
	 */
	private createChartPopulation(data: ApproachAnalysis.Entity[] = []) {
		if (!data || !data.length) {
			if (this.chart5) {
				this.chart5.dispose();
				this.chart5 = null;
			}

			this.showChartNodata5 = true;
			this.totalPopulation = '0';
			return;
		}

		this.chartData5 = data;
		var option = null;
		if (this.chart5) {
			option = this.chart5.getOption();
		} else {

			var dom = document.getElementById('chart5');
			this.chart5 = echarts.init(dom);
			const self = this;
			option = {
				tooltip: {
					trigger: 'axis',
					axisPointer: {
						type: 'shadow'
					},
					formatter: function (params) {
						const d = self.chartData5[ params[ 0 ].dataIndex ];
						return params[ 0 ].name + '<br>' +
							self.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART.TITLE5', '인구수') + ' : ' + self.calcPopulationCnt(d.value) + '천명';
					}
				},
				grid: {
					left: '3%',
					right: '4%',
					bottom: '10%',
					top: '5%',
					containLabel: true
				},
				xAxis: [
					{
						type: 'category',
						axisTick: { show: false },
						axisLabel: {
							color: '#333',
							rotate: 40
						},
						axisLine: {
							lineStyle: {
								color: '#cccccc'
							}
						}
					}
				],
				yAxis: [
					{
						type: 'value',
						axisLabel: {
							formatter: function (value) {
								return self.calcPopulationCnt(value) + '천명';
							}
						}
					}
				]

			};

			this.chart5.on('click', function (params) {
				self.chartItemClick(params.data[ 0 ]);
			});
		}

		let chartData = [];
		// let total = 0;

		Array.from(data).forEach((value) => {
			chartData.push([ value.label, value.value ]);
			// total += value.value;
		});

		// 합계
		// this.totalPopulation = this.calcPopulationCnt(total);

		let series = [
			{
				type: 'bar',
				// barCategoryGap: '50%',
				// barWidth: 14,
				itemStyle: {
					color: '#f3774b'
				},
				data: chartData
			}
		];

		option.series = series;

		this.chart5.setOption(option, true);

		this.showChartNodata5 = false;
	}

	/**
	 * 가용율 / 비가용율 정렬 초기화
	 */
	private initChartSortList1() {
		this.sortList1 = [
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART1.SORT.TITLE1', '가용율 상위순'), '01', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART1.SORT.TITLE2', '가용율 하위순'), '02', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART1.SORT.TITLE3', '공동주택 가용율 상위순'), '03', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART1.SORT.TITLE4', '공동주택 가용율 하위순'), '04', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART1.SORT.TITLE5', '일반주택 가용율 상위순'), '05', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART1.SORT.TITLE6', '일반주택 가용율 하위순'), '06', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART1.SORT.TITLE7', '공동주택 세대수 상위순'), '07', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART1.SORT.TITLE8', '공동주택 세대수 하위순'), '08', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART1.SORT.TITLE9', '일반주택 세대수 상위순'), '09', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART1.SORT.TITLE10', '일반주택 세대수 하위순'), '10', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART1.SORT.TITLE11', '비가용 상위순'), '11', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART1.SORT.TITLE12', '비가용 하위순'), '12', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART1.SORT.TITLE13', '비가용 세대수 상위순'), '13', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART1.SORT.TITLE14', '비가용 세대수 하위순'), '14', false)
		];
	}

	/**
	 * 침투율 / 결합율 정렬 초기화
	 */
	private initChartSortList2() {
		this.sortList2 = [
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART2.SORT.TITLE1', '침투율 상위순'), '01', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART2.SORT.TITLE2', '침투율 하위순'), '02', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART2.SORT.TITLE3', '겹합율 상위순'), '03', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART2.SORT.TITLE4', '겹합율 하위순'), '04', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART2.SORT.TITLE5', '공동주택 침투율 상위순'), '05', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART2.SORT.TITLE6', '공동주택 침투율 하위순'), '06', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART2.SORT.TITLE7', '일반주택 침투율 상위순'), '07', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART2.SORT.TITLE8', '일반주택 침투율 하위순'), '08', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART2.SORT.TITLE9', '공동주택 겹합율 상위순'), '09', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART2.SORT.TITLE10', '공동주택 겹합율 하위순'), '10', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART2.SORT.TITLE11', '일반주택 겹합율 상위순'), '11', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART2.SORT.TITLE12', '일반주택 겹합율 하위순'), '12', false)
		]
	}

	/**
	 * 인구수 정렬 초기화
	 */
	private initChartSortList3() {
		this.sortList3 = [
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART3.SORT.TITLE1', '인구수 오름차순'), '01', false),
			new SelectValue(this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.CHART3.SORT.TITLE2', '인구수 내림차순'), '02', false)
		]
	}

	/**
	 * chart item click
	 * @param key
	 */
	private chartItemClick(key: string) {

		if (!this.currentSido || !this.currentSido.length) {
			// 전국

			let tempArray = _.clone(this.sidoList);
			Array.from(tempArray).find((value) => {
				if (value.label == key) {
					value.checked = true;
					this.currentSido = [ value ];
					return true;
				} else {
					return false;
				}
			});
			this.sidoList = tempArray;
			this.sidoSelect(this.currentSido[ 0 ]);
		} else if (!this.currentSigungu || !this.currentSigungu.length) {
			// 시/도 까지 선택된 상태

			let isSejong = this.isSejong();

			let tempArray;
			if (!isSejong) {
				tempArray = _.clone(this.sigunguList);
				Array.from(this.sigunguList).find((value) => {
					if (value.label == key) {
						value.checked = true;
						this.currentSigungu = [ value ];
						return true;
					} else {
						return false;
					}
				});
				this.sigunguList = tempArray;
				this.sigunguSelect(this.currentSigungu[ 0 ]);
			} else {
				this.currentDong = [];
				tempArray = _.clone(this.dongList);
				Array.from(this.dongList).forEach((value) => {
					if (value.label == key) {
						value.checked = true;
						this.currentDong.push(value);
					}
				});
				this.dongList = tempArray;
				this.dongSelect(this.currentDong);
			}

		} else if (!this.currentDong || !this.currentDong.length) {
			// 시/군/구 까지 선택된 상태

			this.currentDong = [];
			let tempArray = _.clone(this.dongList);
			Array.from(this.dongList).forEach((value) => {
				if (value.label == key) {
					value.checked = true;
					this.currentDong.push(value);
				}
			});
			this.dongList = tempArray;
			this.dongSelect(this.currentDong);

		} else if (!this.currentZipcode || !this.currentZipcode.length) {
			// 읍/면/동 까지 선택된 상태

			this.currentZipcode = [];
			let tempArray = _.clone(this.zipcodeList);
			Array.from(this.zipcodeList).forEach((value) => {
				if (value.label == key) {
					value.checked = true;
					this.currentZipcode.push(value);
				}
			});

			this.zipcodeList = tempArray;
			this.zipcodeSelect(this.currentZipcode);

		} else {
			// 우편번호 까지 선택된 상태

			return;
		}

		this.searchClick();
	}

	/**
	 * 차트 정렬 변경
	 * @param labelList
	 */
	private chartSortByLabel(labelList: string[]) {
		let chartData1 = [];
		Array.from(labelList).forEach(label => {
			this.chartData1.find(value => {
				if (value.label == label) {
					chartData1.push(value);
					return true;
				} else {
					return false;
				}
			});
		});

		let chartData2 = [];
		Array.from(labelList).forEach(label => {
			this.chartData2.find(value => {
				if (value.label == label) {
					chartData2.push(value);
					return true;
				} else {
					return false;
				}
			});
		});

		let chartData3 = [];
		Array.from(labelList).forEach(label => {
			this.chartData3.find(value => {
				if (value.label == label) {
					chartData3.push(value);
					return true;
				} else {
					return false;
				}
			});
		});

		let chartData4 = [];
		Array.from(labelList).forEach(label => {
			this.chartData4.find(value => {
				if (value.label == label) {
					chartData4.push(value);
					return true;
				} else {
					return false;
				}
			});
		});

		let chartData5 = [];
		Array.from(labelList).forEach(label => {
			this.chartData5.find(value => {
				if (value.label == label) {
					chartData5.push(value);
					return true;
				} else {
					return false;
				}
			});
		});

		this.createChartAvailability(chartData1, chartData4);
		this.createChartPenetration(chartData2, chartData3);
		this.createChartPopulation(chartData5);
	}

	/**
	 * 건물리스트 그리드 생성
	 *
	 * @param rows
	 */
	private createBuildingList(): void {
		if (this.gridHeader1 == null) {
			this.gridHeader1 = [];
			this.gridHeader1.push(this.createBuildingColumn('aplyStrdYr', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER26', '가용연도')));
			this.gridHeader1.push(this.createBuildingColumn('blcCd', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER1', '건물코드')));
			this.gridHeader1.push(this.createBuildingColumn('bldNm', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER2', '건물명')));
			this.gridHeader1.push(this.createBuildingColumn('availBldUsgCdNm', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER3', '건물용도')));
			this.gridHeader1.push(this.createBuildingColumn('maxGenCnt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER5', '세대수')));
			this.gridHeader1.push(this.createBuildingColumn('shspdAvailYn', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER6', '가용유무')));
			this.gridHeader1.push(this.createBuildingColumn('shspdInetLnCnt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER7', '초고속인터넷회선수')));
			this.gridHeader1.push(this.createBuildingColumn('infiltrationRate', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER8', '침투율')));
			this.gridHeader1.push(this.createBuildingColumn('summationRate', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER9', '유무선 결합율')));
			this.gridHeader1.push(this.createBuildingColumn('shspdWirwlCombCnt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER11', '유무선 결합건수')));
			this.gridHeader1.push(this.createBuildingColumn('navailBrwsCnt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER10', '비가용로그 조회수')));
			this.gridHeader1.push(this.createBuildingColumn('ctPvcNm', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER12', '시도')));
			this.gridHeader1.push(this.createBuildingColumn('ctGunGuNm', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER13', '시군구')));
			this.gridHeader1.push(this.createBuildingColumn('ldongNm', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER14', '읍면동')));
			this.gridHeader1.push(this.createBuildingColumn('mainHouseNumCtt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER15', '메인 번지')));
			this.gridHeader1.push(this.createBuildingColumn('subHouseNumCtt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER16', '서브 번지')));

			this.gridHeader1.push(this.createBuildingColumn('zip', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER17', 'zip'), true));
			this.gridHeader1.push(this.createBuildingColumn('genCnt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER5', '세대수'), true));
			this.gridHeader1.push(this.createBuildingColumn('gdskHousCnt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER19', '평균세대수'), true));
			this.gridHeader1.push(this.createBuildingColumn('bldRegiHousCnt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER20', '건축물대장세대수'), true));
			this.gridHeader1.push(this.createBuildingColumn('populationCnt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER21', '인구수'), true));
			this.gridHeader1.push(this.createBuildingColumn('availBldUsgCd', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER25', '가용건물구분코드'), true));
			this.gridHeader1.push(this.createBuildingColumn('b2bCustCnt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER27', 'B2B 고객수'), true));
			this.gridHeader1.push(this.createBuildingColumn('bshspdInetLnCnt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER28', 'B판매 초고속인터넷 세대수'), true));
			this.gridHeader1.push(this.createBuildingColumn('tshspdInetLnCnt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER29', 'T판매 초고속인터넷 세대수'), true));
			this.gridHeader1.push(this.createBuildingColumn('binfiltrationRate', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER30', 'B 판매 침투율'), true));
			this.gridHeader1.push(this.createBuildingColumn('tinfiltrationRate', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER31', 'T 판매 침투율'), true));
			this.gridHeader1.push(this.createBuildingColumn('bshspdWrwlCombCnt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER32', 'B판매 유/무선 결합건'), true));
			this.gridHeader1.push(this.createBuildingColumn('tshspdWrwlCombCnt', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER33', 'T판매 유/무선 결합건'), true));
			this.gridHeader1.push(this.createBuildingColumn('bsummationRate', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER34', 'B판매 결합률'), true));
			this.gridHeader1.push(this.createBuildingColumn('tsummationRate', this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.BUILDING.HEADER35', 'T판매 결합률'), true));
		}

		let sido;
		let sigungu;
		let dong;
		let zipcode;

		// 시도
		if (this.currentSido) {
			sido = this.currentSido.map(function (elem) {
				return elem.value;
			});
		}

		// 시군구
		if (this.currentSigungu) {
			sigungu = this.currentSigungu.map(function (elem) {
				return elem.label;
			});
		}

		// 읍면동
		if (this.currentDong) {
			dong = this.currentDong.map(function (elem) {
				return elem.label;
			});
		}

		// 우편번호
		if (this.currentZipcode) {
			zipcode = this.currentZipcode.map(function (elem) {
				return elem.value;
			});
		}

		this.showLoading(true);
		this.approachAnalysisService.getBuildingList(sido, sigungu, dong, zipcode, this.startDate, this.endDate).then(result => {
			if (CommonConstant.CODE.RESULT_CODE.SUCCESS === result.code) {
				let rows = result.data.buildingList;

				if (environment.isLocalMode) {
					rows = this.createTempBuildingData();
				}

				if (rows.length) {
					Array.from(rows).forEach((value) => {
						value.infiltrationRate = this.rateToPercent(value.infiltrationRate);
						value.summationRate = this.rateToPercent(value.summationRate);
						value.binfiltrationRate = this.rateToPercent(value.binfiltrationRate);
						value.tinfiltrationRate = this.rateToPercent(value.tinfiltrationRate);
						value.bsummationRate = this.rateToPercent(value.bsummationRate);
						value.tsummationRate = this.rateToPercent(value.tsummationRate);
					});

					this.grid1.create(this.gridHeader1, rows, new GridOption()
						.SyncColumnCellResize(true)
						.MultiColumnSort(true)
						.RowHeight(32)
						.MultiSelect(false)
						.build()
					);

					this.showGridNodata1 = false;
				} else {
					this.showGridNodata1 = true;
				}
			}
			this.showLoading(false);
		}).catch(reason => {
			this.showLoading(false);
		});
	}

	/**
	 * 건물 목록 그리드 컬럼 생성
	 * @param {string} column
	 * @param {string} label
	 * @param {boolean} isHidden
	 * @returns {header}
	 */
	private createBuildingColumn(column: string, label: string, isHidden: boolean = false) {
		return new SlickGridHeader()
			.Id(column)
			.Name(label)
			.Field(column)
			.Behavior('select')
			.Width(88.75)
			.Hidden(isHidden)
			.CannotTriggerInsert(true)
			.Resizable(true)
			.Unselectable(true)
			.Sortable(true)
			.build();
	}

	/**
	 * 건물 목록 임시 데이터
	 * @returns {Array}
	 */
	private createTempBuildingData() {
		let buildingList = [];
		let length = Math.floor(Math.random() * 40);
		for (var i = 0; i < length; i++) {
			let item = new ApproachAnalysis.Building();
			item.zip = 'a';
			item.blcCd = 'b';
			item.bldNm = 'c';
			item.plotClNm = 'd';
			item.genCnt = 1;
			item.gdskHousCnt = 2;
			item.bldRegiHousCnt = 3;
			item.populationCnt = 4;
			item.shspdAvailYn = 'e';
			item.shspdInetLnCnt = 5;
			item.shspdWirwlCombCnt = 6;
			item.infiltrationRate = 7;
			item.summationRate = 8;
			item.navailBrwsCnt = 9;
			item.stNmDtlAddr = 'f';
			item.stNmLotnAddr = 'g';
			item.maxGenCnt = 10;
			item.housTypNm = 'h';
			item.ldongNm = 'i';
			item.ctGunGuNm = 'j';
			item.ctPvcNm = 'k';
			item.houseNumTypCd = 'l';
			item.mainHouseNumCtt = 'm';
			item.subHouseNumCtt = 'n';
			item.availBldUsgCdNm = 'o';
			item.availBldUsgCd = 'p';
			item.aplyStrdYr = 'q';
			buildingList.push(item);
		}

		return buildingList;
	}

	/**
	 * 커버리지 그리드 생성
	 * @param rows
	 */
	private createCoverageList(coverageList: ApproachAnalysis.Coverage[]) {
		if (environment.isLocalMode) {
			coverageList = this.createTempCoverageData();
		}

		if (coverageList.length) {
			const sortBase = [ '신축아파트', '미진입아파트', '블록Hole', '개별Hole', '신축건물', 'HFC매체전환', 'SORO자가전환', '광랜V고도화', '광랜EF고도화' ];

			let etcRow: ApproachAnalysis.Coverage = null;
			let totalRow = new ApproachAnalysis.Coverage();
			totalRow.label = this.translateService.instant('CUSTOM.APP.APPROACH.ANALYSIS.GRID.COVERAGE.TOTAL', '합계');
			totalRow.maxGenCnt = 0;
			totalRow.infiltrationRate = 0;
			totalRow.binfiltrationRate = 0;
			totalRow.tinfiltrationRate = 0;
			totalRow.shspdInetLnCnt = 0;
			totalRow.tshspdInetLnCnt = 0;
			totalRow.bshspdInetLnCnt = 0;
			totalRow.isTotal = true;

			let count: number = 0;

			Array.from(coverageList).forEach((value) => {
				if (sortBase.indexOf(value.label) > -1) {
					totalRow.maxGenCnt += value.maxGenCnt;
					totalRow.infiltrationRate += value.infiltrationRate;
					totalRow.binfiltrationRate += value.binfiltrationRate;
					totalRow.tinfiltrationRate += value.tinfiltrationRate;
					totalRow.shspdInetLnCnt += value.shspdInetLnCnt;
					totalRow.tshspdInetLnCnt += value.tshspdInetLnCnt;
					totalRow.bshspdInetLnCnt += value.bshspdInetLnCnt;
					count++;
				}

				if (value.label == '그외기타' || value.label == '그외 기타') {
					etcRow = value;
				}
			});

			let sortArray: ApproachAnalysis.Coverage[] = [];
			Array.from(sortBase).forEach((sortValue) => {
				Array.from(coverageList).forEach((value) => {
					if (sortValue == value.label) {
						sortArray.push(value);
						return;
					}
				});
			});

			totalRow.infiltrationRate = totalRow.infiltrationRate / count;
			totalRow.binfiltrationRate = totalRow.binfiltrationRate / count;
			totalRow.tinfiltrationRate = totalRow.tinfiltrationRate / count;
			// 합계
			sortArray.push(totalRow);
			if (etcRow) {
				// 그외 기타
				sortArray.push(etcRow);
			}

			this.coverageList = sortArray;

			this.showGridNodata2 = false;
		} else {
			this.showGridNodata2 = true;
		}
	}

	/**
	 * 커버리지 목록 임시 데이터
	 * @returns {Array}
	 */
	private createTempCoverageData() {
		const labels = [ '미진입아파트', '신축아파트', '광랜V고도화', '개별Hole', 'HFC매체전환', '블록Hole', '신축건물', 'SORO자가전환', '광랜EF고도화' ];
		let coverageList = [];
		let length = labels.length + 1;
		for (var i = 0; i < length; i++) {
			let item = new ApproachAnalysis.Coverage();
			item.label = labels[ i ] ? labels[ i ] : '그외 기타';
			item.maxGenCnt = Math.random() * 1000000;
			item.infiltrationRate = Math.random();
			item.binfiltrationRate = Math.random();
			item.tinfiltrationRate = Math.random();
			item.shspdInetLnCnt = Math.random() * 1000000;
			item.bshspdInetLnCnt = Math.random() * 1000000;
			item.tshspdInetLnCnt = Math.random() * 1000000;
			coverageList.push(item);
		}

		return coverageList;
	}

	/**
	 * get addr
	 * @returns {string}
	 */
	private getAddrText() {

		let addr = '';

		if (this.currentSido && this.currentSido.length) {
			Array.from(this.currentSido).forEach((value) => {
				if (value.value != 'ALL') {
					addr += value.label + ', ';
				}
			});

			if (addr.indexOf(', ') > -1) {
				addr = addr.substring(0, addr.lastIndexOf(', '));
			}
		}

		if (this.currentSigungu && this.currentSigungu.length) {
			addr += ' ';

			Array.from(this.currentSigungu).forEach((value) => {
				if (value.value != 'ALL') {
					addr += value.label + ', ';
				}
			});

			if (addr.indexOf(', ') > -1) {
				addr = addr.substring(0, addr.lastIndexOf(', '));
			}
		}

		if (this.currentDong && this.currentDong.length) {
			addr += ' ';

			Array.from(this.currentDong).forEach((value) => {
				if (value.value != 'ALL') {
					addr += value.label + ', ';
				}
			});

			if (addr.indexOf(', ') > -1) {
				addr = addr.substring(0, addr.lastIndexOf(', '));
			}
		}

		return addr;
	}

	public addComma(num) {
		var regexp = /\B(?=(\d{3})+(?!\d))/g;
		return num.toString().replace(regexp, ',');
	}

	public rateToPercent(rate: number) {
		return Math.round((rate ? rate : 0) * 10000) / 100;
	}

	// 인구수 천명 단위
	private calcPopulationCnt(populationCnt: number) {
		return this.addComma(Math.floor(populationCnt / 1000));
	}

	// 세종시 선택 중인지 여부
	private isSejong() {
		let isSejong = false;
		Array.from(this.currentSido).forEach((value) => {
			if (value.label == '세종특별자치시') {
				isSejong = true;
				return;
			}
		});

		return isSejong;
	}

	// show loading
	private showLoading(isShow: boolean) {
		if (isShow) {
			this.loadingCount++;
		} else {
			this.loadingCount--;
		}

		if (this.loadingCount > 0) {
			Loading.show();
		} else {
			Loading.hide();
			this.loadingCount = 0;
		}
	}

}
